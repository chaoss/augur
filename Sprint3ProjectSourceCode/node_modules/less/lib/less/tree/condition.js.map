{"version":3,"file":"condition.js","sourceRoot":"","sources":["../../../src/less/tree/condition.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,gDAA0B;AAE1B;IAAwB,6BAAI;IACxB,mBAAY,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM;QAA/B,YACI,iBAAO,SAOV;QALG,KAAI,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;QACpB,KAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,KAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,KAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;IACzB,CAAC;IAED,0BAAM,GAAN,UAAO,OAAO;QACV,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,wBAAI,GAAJ,UAAK,OAAO;QACR,IAAM,MAAM,GAAG,CAAC,UAAC,EAAE,EAAE,CAAC,EAAE,CAAC;YACrB,QAAQ,EAAE,EAAE;gBACR,KAAK,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC1B,KAAK,IAAI,CAAC,CAAE,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC1B;oBACI,QAAQ,cAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;wBACxB,KAAK,CAAC,CAAC;4BACH,OAAO,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,CAAC;wBACpD,KAAK,CAAC;4BACF,OAAO,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,CAAC;wBACnE,KAAK,CAAC;4BACF,OAAO,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,IAAI,CAAC;wBACrC;4BACI,OAAO,KAAK,CAAC;qBACpB;aACR;QACL,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QAElE,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;IAC1C,CAAC;IACL,gBAAC;AAAD,CAAC,AArCD,CAAwB,cAAI,GAqC3B;AAED,SAAS,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW,CAAC;AACvC,kBAAe,SAAS,CAAC","sourcesContent":["import Node from './node';\n\nclass Condition extends Node {\n    constructor(op, l, r, i, negate) {\n        super();\n\n        this.op = op.trim();\n        this.lvalue = l;\n        this.rvalue = r;\n        this._index = i;\n        this.negate = negate;\n    }\n\n    accept(visitor) {\n        this.lvalue = visitor.visit(this.lvalue);\n        this.rvalue = visitor.visit(this.rvalue);\n    }\n\n    eval(context) {\n        const result = ((op, a, b) => {\n            switch (op) {\n                case 'and': return a && b;\n                case 'or':  return a || b;\n                default:\n                    switch (Node.compare(a, b)) {\n                        case -1:\n                            return op === '<' || op === '=<' || op === '<=';\n                        case 0:\n                            return op === '=' || op === '>=' || op === '=<' || op === '<=';\n                        case 1:\n                            return op === '>' || op === '>=';\n                        default:\n                            return false;\n                    }\n            }\n        })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\n\n        return this.negate ? !result : result;\n    }\n}\n\nCondition.prototype.type = 'Condition';\nexport default Condition;\n"]}