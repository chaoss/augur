{"version":3,"file":"anonymous.js","sourceRoot":"","sources":["../../../src/less/tree/anonymous.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,gDAA0B;AAE1B;IAAwB,6BAAI;IACxB,mBAAY,KAAK,EAAE,KAAK,EAAE,eAAe,EAAE,QAAQ,EAAE,WAAW,EAAE,cAAc;QAAhF,YACI,iBAAO,SASV;QAPG,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,KAAI,CAAC,SAAS,GAAG,eAAe,CAAC;QACjC,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,KAAI,CAAC,WAAW,GAAG,CAAC,OAAO,WAAW,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC;QAC9E,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,KAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;;IAC5C,CAAC;IAED,wBAAI,GAAJ;QACI,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IAC1H,CAAC;IAED,2BAAO,GAAP,UAAQ,KAAK;QACT,OAAO,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,KAAK,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACzE,CAAC;IAED,iCAAa,GAAb;QACI,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,0BAAM,GAAN,UAAO,OAAO,EAAE,MAAM;QAClB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SACtE;IACL,CAAC;IACL,gBAAC;AAAD,CAAC,AA/BD,CAAwB,cAAI,GA+B3B;AAED,SAAS,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW,CAAC;AACvC,kBAAe,SAAS,CAAC","sourcesContent":["import Node from './node';\n\nclass Anonymous extends Node {\n    constructor(value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {\n        super();\n\n        this.value = value;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.mapLines = mapLines;\n        this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;\n        this.allowRoot = true;\n        this.copyVisibilityInfo(visibilityInfo);\n    }\n\n    eval() {\n        return new Anonymous(this.value, this._index, this._fileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());\n    }\n\n    compare(other) {\n        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n    }\n\n    isRulesetLike() {\n        return this.rulesetLike;\n    }\n\n    genCSS(context, output) {\n        this.nodeVisible = Boolean(this.value);\n        if (this.nodeVisible) {\n            output.add(this.value, this._fileInfo, this._index, this.mapLines);\n        }\n    }\n}\n\nAnonymous.prototype.type = 'Anonymous';\nexport default Anonymous;\n"]}