/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler/src/render3/view/t2_api", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidDJfYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXIvc3JjL3JlbmRlcjMvdmlldy90Ml9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7QVNUfSBmcm9tICcuLi8uLi9leHByZXNzaW9uX3BhcnNlci9hc3QnO1xuaW1wb3J0IHtCb3VuZEF0dHJpYnV0ZSwgQm91bmRFdmVudCwgRWxlbWVudCwgTm9kZSwgUmVmZXJlbmNlLCBUZW1wbGF0ZSwgVGV4dEF0dHJpYnV0ZSwgVmFyaWFibGV9IGZyb20gJy4uL3IzX2FzdCc7XG5cblxuLypcbiAqIHQyIGlzIHRoZSByZXBsYWNlbWVudCBmb3IgdGhlIGBUZW1wbGF0ZURlZmluaXRpb25CdWlsZGVyYC4gSXQgaGFuZGxlcyB0aGUgb3BlcmF0aW9ucyBvZlxuICogYW5hbHl6aW5nIEFuZ3VsYXIgdGVtcGxhdGVzLCBleHRyYWN0aW5nIHNlbWFudGljIGluZm8sIGFuZCB1bHRpbWF0ZWx5IHByb2R1Y2luZyBhIHRlbXBsYXRlXG4gKiBkZWZpbml0aW9uIGZ1bmN0aW9uIHdoaWNoIHJlbmRlcnMgdGhlIHRlbXBsYXRlIHVzaW5nIEl2eSBpbnN0cnVjdGlvbnMuXG4gKlxuICogdDIgZGF0YSBpcyBhbHNvIHV0aWxpemVkIGJ5IHRoZSB0ZW1wbGF0ZSB0eXBlLWNoZWNraW5nIGZhY2lsaXRpZXMgdG8gdW5kZXJzdGFuZCBhIHRlbXBsYXRlIGVub3VnaFxuICogdG8gZ2VuZXJhdGUgdHlwZS1jaGVja2luZyBjb2RlIGZvciBpdC5cbiAqL1xuXG4vKipcbiAqIEEgbG9naWNhbCB0YXJnZXQgZm9yIGFuYWx5c2lzLCB3aGljaCBjb3VsZCBjb250YWluIGEgdGVtcGxhdGUgb3Igb3RoZXIgdHlwZXMgb2YgYmluZGluZ3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFyZ2V0IHtcbiAgdGVtcGxhdGU/OiBOb2RlW107XG59XG5cbi8qKlxuICogTWV0YWRhdGEgcmVnYXJkaW5nIGEgZGlyZWN0aXZlIHRoYXQncyBuZWVkZWQgdG8gbWF0Y2ggaXQgYWdhaW5zdCB0ZW1wbGF0ZSBlbGVtZW50cy4gVGhpcyBpc1xuICogcHJvdmlkZWQgYnkgYSBjb25zdW1lciBvZiB0aGUgdDIgQVBJcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXJlY3RpdmVNZXRhIHtcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGRpcmVjdGl2ZSBjbGFzcyAodXNlZCBmb3IgZGVidWdnaW5nKS5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZGlyZWN0aXZlIGlzIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaXNDb21wb25lbnQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNldCBvZiBpbnB1dHMgd2hpY2ggdGhpcyBkaXJlY3RpdmUgY2xhaW1zLlxuICAgKlxuICAgKiBHb2VzIGZyb20gcHJvcGVydHkgbmFtZXMgdG8gZmllbGQgbmFtZXMuXG4gICAqL1xuICBpbnB1dHM6IHtbcHJvcGVydHk6IHN0cmluZ106IHN0cmluZ3xbc3RyaW5nLCBzdHJpbmddfTtcblxuICAvKipcbiAgICogU2V0IG9mIG91dHB1dHMgd2hpY2ggdGhpcyBkaXJlY3RpdmUgY2xhaW1zLlxuICAgKlxuICAgKiBHb2VzIGZyb20gcHJvcGVydHkgbmFtZXMgdG8gZmllbGQgbmFtZXMuXG4gICAqL1xuICBvdXRwdXRzOiB7W3Byb3BlcnR5OiBzdHJpbmddOiBzdHJpbmd9O1xuXG4gIC8qKlxuICAgKiBOYW1lIHVuZGVyIHdoaWNoIHRoZSBkaXJlY3RpdmUgaXMgZXhwb3J0ZWQsIGlmIGFueSAoZXhwb3J0QXMgaW4gQW5ndWxhcikuXG4gICAqXG4gICAqIE51bGwgb3RoZXJ3aXNlXG4gICAqL1xuICBleHBvcnRBczogc3RyaW5nW118bnVsbDtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgdG8gdGhlIGJpbmRpbmcgQVBJLCB3aGljaCBwcm9jZXNzZXMgYSB0ZW1wbGF0ZSBhbmQgcmV0dXJucyBhbiBvYmplY3Qgc2ltaWxhciB0byB0aGVcbiAqIGB0cy5UeXBlQ2hlY2tlcmAuXG4gKlxuICogVGhlIHJldHVybmVkIGBCb3VuZFRhcmdldGAgaGFzIGFuIEFQSSBmb3IgZXh0cmFjdGluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcHJvY2Vzc2VkIHRhcmdldC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUYXJnZXRCaW5kZXI8RCBleHRlbmRzIERpcmVjdGl2ZU1ldGE+IHtcbiAgYmluZCh0YXJnZXQ6IFRhcmdldCk6IEJvdW5kVGFyZ2V0PEQ+O1xufVxuXG4vKipcbiAqIFJlc3VsdCBvZiBwZXJmb3JtaW5nIHRoZSBiaW5kaW5nIG9wZXJhdGlvbiBhZ2FpbnN0IGEgYFRhcmdldGAuXG4gKlxuICogVGhlIG9yaWdpbmFsIGBUYXJnZXRgIGlzIGFjY2Vzc2libGUsIGFzIHdlbGwgYXMgYSBzdWl0ZSBvZiBtZXRob2RzIGZvciBleHRyYWN0aW5nIGJpbmRpbmdcbiAqIGluZm9ybWF0aW9uIHJlZ2FyZGluZyB0aGUgYFRhcmdldGAuXG4gKlxuICogQHBhcmFtIERpcmVjdGl2ZVQgZGlyZWN0aXZlIG1ldGFkYXRhIHR5cGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCb3VuZFRhcmdldDxEaXJlY3RpdmVUIGV4dGVuZHMgRGlyZWN0aXZlTWV0YT4ge1xuICAvKipcbiAgICogR2V0IHRoZSBvcmlnaW5hbCBgVGFyZ2V0YCB0aGF0IHdhcyBib3VuZC5cbiAgICovXG4gIHJlYWRvbmx5IHRhcmdldDogVGFyZ2V0O1xuXG4gIC8qKlxuICAgKiBGb3IgYSBnaXZlbiB0ZW1wbGF0ZSBub2RlIChlaXRoZXIgYW4gYEVsZW1lbnRgIG9yIGEgYFRlbXBsYXRlYCksIGdldCB0aGUgc2V0IG9mIGRpcmVjdGl2ZXNcbiAgICogd2hpY2ggbWF0Y2hlZCB0aGUgbm9kZSwgaWYgYW55LlxuICAgKi9cbiAgZ2V0RGlyZWN0aXZlc09mTm9kZShub2RlOiBFbGVtZW50fFRlbXBsYXRlKTogRGlyZWN0aXZlVFtdfG51bGw7XG5cbiAgLyoqXG4gICAqIEZvciBhIGdpdmVuIGBSZWZlcmVuY2VgLCBnZXQgdGhlIHJlZmVyZW5jZSdzIHRhcmdldCAtIGVpdGhlciBhbiBgRWxlbWVudGAsIGEgYFRlbXBsYXRlYCwgb3JcbiAgICogYSBkaXJlY3RpdmUgb24gYSBwYXJ0aWN1bGFyIG5vZGUuXG4gICAqL1xuICBnZXRSZWZlcmVuY2VUYXJnZXQocmVmOiBSZWZlcmVuY2UpOiB7ZGlyZWN0aXZlOiBEaXJlY3RpdmVULCBub2RlOiBFbGVtZW50fFRlbXBsYXRlfXxFbGVtZW50XG4gICAgICB8VGVtcGxhdGV8bnVsbDtcblxuICAvKipcbiAgICogRm9yIGEgZ2l2ZW4gYmluZGluZywgZ2V0IHRoZSBlbnRpdHkgdG8gd2hpY2ggdGhlIGJpbmRpbmcgaXMgYmVpbmcgbWFkZS5cbiAgICpcbiAgICogVGhpcyB3aWxsIGVpdGhlciBiZSBhIGRpcmVjdGl2ZSBvciB0aGUgbm9kZSBpdHNlbGYuXG4gICAqL1xuICBnZXRDb25zdW1lck9mQmluZGluZyhiaW5kaW5nOiBCb3VuZEF0dHJpYnV0ZXxCb3VuZEV2ZW50fFRleHRBdHRyaWJ1dGUpOiBEaXJlY3RpdmVUfEVsZW1lbnRcbiAgICAgIHxUZW1wbGF0ZXxudWxsO1xuXG4gIC8qKlxuICAgKiBJZiB0aGUgZ2l2ZW4gYEFTVGAgZXhwcmVzc2lvbiByZWZlcnMgdG8gYSBgUmVmZXJlbmNlYCBvciBgVmFyaWFibGVgIHdpdGhpbiB0aGUgYFRhcmdldGAsIHRoZW5cbiAgICogcmV0dXJuIHRoYXQuXG4gICAqXG4gICAqIE90aGVyd2lzZSwgcmV0dXJucyBgbnVsbGAuXG4gICAqXG4gICAqIFRoaXMgaXMgb25seSBkZWZpbmVkIGZvciBgQVNUYCBleHByZXNzaW9ucyB0aGF0IHJlYWQgb3Igd3JpdGUgdG8gYSBwcm9wZXJ0eSBvZiBhblxuICAgKiBgSW1wbGljaXRSZWNlaXZlcmAuXG4gICAqL1xuICBnZXRFeHByZXNzaW9uVGFyZ2V0KGV4cHI6IEFTVCk6IFJlZmVyZW5jZXxWYXJpYWJsZXxudWxsO1xuXG4gIC8qKlxuICAgKiBHaXZlbiBhIHBhcnRpY3VsYXIgYFJlZmVyZW5jZWAgb3IgYFZhcmlhYmxlYCwgZ2V0IHRoZSBgVGVtcGxhdGVgIHdoaWNoIGNyZWF0ZWQgaXQuXG4gICAqXG4gICAqIEFsbCBgVmFyaWFibGVgcyBhcmUgZGVmaW5lZCBvbiB0ZW1wbGF0ZXMsIHNvIHRoaXMgd2lsbCBhbHdheXMgcmV0dXJuIGEgdmFsdWUgZm9yIGEgYFZhcmlhYmxlYFxuICAgKiBmcm9tIHRoZSBgVGFyZ2V0YC4gRm9yIGBSZWZlcmVuY2VgcyB0aGlzIG9ubHkgcmV0dXJucyBhIHZhbHVlIGlmIHRoZSBgUmVmZXJlbmNlYCBwb2ludHMgdG8gYVxuICAgKiBgVGVtcGxhdGVgLiBSZXR1cm5zIGBudWxsYCBvdGhlcndpc2UuXG4gICAqL1xuICBnZXRUZW1wbGF0ZU9mU3ltYm9sKHN5bWJvbDogUmVmZXJlbmNlfFZhcmlhYmxlKTogVGVtcGxhdGV8bnVsbDtcblxuICAvKipcbiAgICogR2V0IHRoZSBuZXN0aW5nIGxldmVsIG9mIGEgcGFydGljdWxhciBgVGVtcGxhdGVgLlxuICAgKlxuICAgKiBUaGlzIHN0YXJ0cyBhdCAxIGZvciB0b3AtbGV2ZWwgYFRlbXBsYXRlYHMgd2l0aGluIHRoZSBgVGFyZ2V0YCBhbmQgaW5jcmVhc2VzIGZvciBgVGVtcGxhdGVgc1xuICAgKiBuZXN0ZWQgYXQgZGVlcGVyIGxldmVscy5cbiAgICovXG4gIGdldE5lc3RpbmdMZXZlbCh0ZW1wbGF0ZTogVGVtcGxhdGUpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEdldCBhIGxpc3Qgb2YgYWxsIHRoZSBkaXJlY3RpdmVzIHVzZWQgYnkgdGhlIHRhcmdldC5cbiAgICovXG4gIGdldFVzZWREaXJlY3RpdmVzKCk6IERpcmVjdGl2ZVRbXTtcblxuICAvKipcbiAgICogR2V0IGEgbGlzdCBvZiBhbGwgdGhlIHBpcGVzIHVzZWQgYnkgdGhlIHRhcmdldC5cbiAgICovXG4gIGdldFVzZWRQaXBlcygpOiBzdHJpbmdbXTtcbn1cbiJdfQ==