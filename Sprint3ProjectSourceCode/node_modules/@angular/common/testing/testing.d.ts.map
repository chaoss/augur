{"version":3,"file":"testing.d.ts","sources":["testing.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license Angular v10.0.4\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { LocationChangeListener } from '@angular/common';\r\nimport { LocationStrategy } from '@angular/common';\r\nimport { PlatformLocation } from '@angular/common';\r\nimport { SubscriptionLike } from 'rxjs';\r\n\r\n/**\r\n * Provider for mock platform location config\r\n *\r\n * @publicApi\r\n */\r\nexport declare const MOCK_PLATFORM_LOCATION_CONFIG: InjectionToken<MockPlatformLocationConfig>;\r\n\r\n/**\r\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\r\n * location events.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class MockLocationStrategy extends LocationStrategy {\r\n    internalBaseHref: string;\r\n    internalPath: string;\r\n    internalTitle: string;\r\n    urlChanges: string[];\r\n    private stateChanges;\r\n    constructor();\r\n    simulatePopState(url: string): void;\r\n    path(includeHash?: boolean): string;\r\n    prepareExternalUrl(internal: string): string;\r\n    pushState(ctx: any, title: string, path: string, query: string): void;\r\n    replaceState(ctx: any, title: string, path: string, query: string): void;\r\n    onPopState(fn: (value: any) => void): void;\r\n    getBaseHref(): string;\r\n    back(): void;\r\n    forward(): void;\r\n    getState(): unknown;\r\n}\r\n\r\n/**\r\n * Mock implementation of URL state.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class MockPlatformLocation implements PlatformLocation {\r\n    private baseHref;\r\n    private hashUpdate;\r\n    private urlChanges;\r\n    constructor(config?: MockPlatformLocationConfig);\r\n    get hostname(): string;\r\n    get protocol(): string;\r\n    get port(): string;\r\n    get pathname(): string;\r\n    get search(): string;\r\n    get hash(): string;\r\n    get state(): unknown;\r\n    getBaseHrefFromDOM(): string;\r\n    onPopState(fn: LocationChangeListener): void;\r\n    onHashChange(fn: LocationChangeListener): void;\r\n    get href(): string;\r\n    get url(): string;\r\n    private parseChanges;\r\n    replaceState(state: any, title: string, newUrl: string): void;\r\n    pushState(state: any, title: string, newUrl: string): void;\r\n    forward(): void;\r\n    back(): void;\r\n    getState(): unknown;\r\n}\r\n\r\n/**\r\n * Mock platform location config\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface MockPlatformLocationConfig {\r\n    startUrl?: string;\r\n    appBaseHref?: string;\r\n}\r\n\r\n/**\r\n * A spy for {@link Location} that allows tests to fire simulated location events.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class SpyLocation implements Location {\r\n    urlChanges: string[];\r\n    private _history;\r\n    private _historyIndex;\r\n    setInitialPath(url: string): void;\r\n    setBaseHref(url: string): void;\r\n    path(): string;\r\n    getState(): unknown;\r\n    isCurrentPathEqualTo(path: string, query?: string): boolean;\r\n    simulateUrlPop(pathname: string): void;\r\n    simulateHashChange(pathname: string): void;\r\n    prepareExternalUrl(url: string): string;\r\n    go(path: string, query?: string, state?: any): void;\r\n    replaceState(path: string, query?: string, state?: any): void;\r\n    forward(): void;\r\n    back(): void;\r\n    onUrlChange(fn: (url: string, state: unknown) => void): void;\r\n    subscribe(onNext: (value: any) => void, onThrow?: ((error: any) => void) | null, onReturn?: (() => void) | null): SubscriptionLike;\r\n    normalize(url: string): string;\r\n}\r\n\r\nexport { }\r\n"]}