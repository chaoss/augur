{"version":3,"file":"core-testing.umd.js","sources":["../../../../../packages/core/testing/src/async_fallback.ts","../../../../../packages/core/testing/src/async.ts","../../../../../packages/core/testing/src/component_fixture.ts","../../../../../packages/core/testing/src/fake_async_fallback.ts","../../../../../packages/core/testing/src/fake_async.ts","../../../../../external/npm/node_modules/tslib/tslib.es6.js","../../../../../packages/core/testing/src/async_test_completer.ts","../../../../../packages/core/src/metadata/resource_loading.ts","../../../../../packages/core/testing/src/metadata_overrider.ts","../../../../../packages/core/testing/src/resolvers.ts","../../../../../packages/core/testing/src/r3_test_bed_compiler.ts","../../../../../packages/core/testing/src/test_bed_common.ts","../../../../../packages/core/testing/src/r3_test_bed.ts","../../../../../packages/core/testing/src/test_compiler.ts","../../../../../packages/core/testing/src/test_bed.ts","../../../../../packages/core/testing/src/before_each.ts","../../../../../packages/core/testing/src/metadata_override.ts","../../../../../packages/core/testing/src/private_export_testing.ts","../../../../../packages/core/testing/src/testing.ts","../../../../../packages/core/testing/public_api.ts","../../../../../packages/core/testing/index.ts","../../../../../packages/core/testing/testing.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * async has been moved to zone.js\n * this file is for fallback in case old version of zone.js is used\n */\ndeclare var global: any;\n\nconst _global = <any>(typeof window === 'undefined' ? global : window);\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n *\n */\nexport function asyncFallback(fn: Function): (done: any) => any {\n  // If we're running using the Jasmine test framework, adapt to call the 'done'\n  // function when asynchronous activity is finished.\n  if (_global.jasmine) {\n    // Not using an arrow function to preserve context passed from call site\n    return function(this: unknown, done: any) {\n      if (!done) {\n        // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n        // fake it here and assume sync.\n        done = function() {};\n        done.fail = function(e: any) {\n          throw e;\n        };\n      }\n      runInTestZone(fn, this, done, (err: any) => {\n        if (typeof err === 'string') {\n          return done.fail(new Error(err));\n        } else {\n          done.fail(err);\n        }\n      });\n    };\n  }\n  // Otherwise, return a promise which will resolve when asynchronous activity\n  // is finished. This will be correctly consumed by the Mocha framework with\n  // it('...', async(myFn)); or can be used in a custom framework.\n  // Not using an arrow function to preserve context passed from call site\n  return function(this: unknown) {\n    return new Promise<void>((finishCallback, failCallback) => {\n      runInTestZone(fn, this, finishCallback, failCallback);\n    });\n  };\n}\n\nfunction runInTestZone(\n    fn: Function, context: any, finishCallback: Function, failCallback: Function) {\n  const currentZone = Zone.current;\n  const AsyncTestZoneSpec = (Zone as any)['AsyncTestZoneSpec'];\n  if (AsyncTestZoneSpec === undefined) {\n    throw new Error(\n        'AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n        'Please make sure that your environment includes zone.js/dist/async-test.js');\n  }\n  const ProxyZoneSpec = (Zone as any)['ProxyZoneSpec'] as {\n    get(): {setDelegate(spec: ZoneSpec): void; getDelegate(): ZoneSpec;};\n    assertPresent: () => void;\n  };\n  if (ProxyZoneSpec === undefined) {\n    throw new Error(\n        'ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n        'Please make sure that your environment includes zone.js/dist/proxy.js');\n  }\n  const proxyZoneSpec = ProxyZoneSpec.get();\n  ProxyZoneSpec.assertPresent();\n  // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n  // If we do it in ProxyZone then we will get to infinite recursion.\n  const proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n  const previousDelegate = proxyZoneSpec.getDelegate();\n  proxyZone!.parent!.run(() => {\n    const testZoneSpec: ZoneSpec = new AsyncTestZoneSpec(\n        () => {\n          // Need to restore the original zone.\n          currentZone.run(() => {\n            if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n              // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n              proxyZoneSpec.setDelegate(previousDelegate);\n            }\n            finishCallback();\n          });\n        },\n        (error: any) => {\n          // Need to restore the original zone.\n          currentZone.run(() => {\n            if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n              // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n              proxyZoneSpec.setDelegate(previousDelegate);\n            }\n            failCallback(error);\n          });\n        },\n        'test');\n    proxyZoneSpec.setDelegate(testZoneSpec);\n  });\n  return Zone.current.runGuarded(fn, context);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {asyncFallback} from './async_fallback';\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\nexport function async(fn: Function): (done: any) => any {\n  const _Zone: any = typeof Zone !== 'undefined' ? Zone : null;\n  if (!_Zone) {\n    return function() {\n      return Promise.reject(\n          'Zone is needed for the async() test helper but could not be found. ' +\n          'Please make sure that your environment includes zone.js/dist/zone.js');\n    };\n  }\n  const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n  if (typeof asyncTest === 'function') {\n    return asyncTest(fn);\n  }\n  // not using new version of zone.js\n  // TODO @JiaLiPassion, remove this after all library updated to\n  // newest version of zone.js(0.8.25)\n  return asyncFallback(fn);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, ComponentRef, DebugElement, ElementRef, getDebugNode, NgZone, RendererFactory2} from '@angular/core';\n\n\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\nexport class ComponentFixture<T> {\n  /**\n   * The DebugElement associated with the root element of this component.\n   */\n  debugElement: DebugElement;\n\n  /**\n   * The instance of the root component class.\n   */\n  componentInstance: T;\n\n  /**\n   * The native element at the root of the component.\n   */\n  nativeElement: any;\n\n  /**\n   * The ElementRef for the element at the root of the component.\n   */\n  elementRef: ElementRef;\n\n  /**\n   * The ChangeDetectorRef for the component\n   */\n  changeDetectorRef: ChangeDetectorRef;\n\n  private _renderer: RendererFactory2|null|undefined;\n  private _isStable: boolean = true;\n  private _isDestroyed: boolean = false;\n  private _resolve: ((result: any) => void)|null = null;\n  private _promise: Promise<any>|null = null;\n  private _onUnstableSubscription: any /** TODO #9100 */ = null;\n  private _onStableSubscription: any /** TODO #9100 */ = null;\n  private _onMicrotaskEmptySubscription: any /** TODO #9100 */ = null;\n  private _onErrorSubscription: any /** TODO #9100 */ = null;\n\n  constructor(\n      public componentRef: ComponentRef<T>, public ngZone: NgZone|null,\n      private _autoDetect: boolean) {\n    this.changeDetectorRef = componentRef.changeDetectorRef;\n    this.elementRef = componentRef.location;\n    this.debugElement = <DebugElement>getDebugNode(this.elementRef.nativeElement);\n    this.componentInstance = componentRef.instance;\n    this.nativeElement = this.elementRef.nativeElement;\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n\n    if (ngZone) {\n      // Create subscriptions outside the NgZone so that the callbacks run oustide\n      // of NgZone.\n      ngZone.runOutsideAngular(() => {\n        this._onUnstableSubscription = ngZone.onUnstable.subscribe({\n          next: () => {\n            this._isStable = false;\n          }\n        });\n        this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n          next: () => {\n            if (this._autoDetect) {\n              // Do a change detection run with checkNoChanges set to true to check\n              // there are no changes on the second run.\n              this.detectChanges(true);\n            }\n          }\n        });\n        this._onStableSubscription = ngZone.onStable.subscribe({\n          next: () => {\n            this._isStable = true;\n            // Check whether there is a pending whenStable() completer to resolve.\n            if (this._promise !== null) {\n              // If so check whether there are no pending macrotasks before resolving.\n              // Do this check in the next tick so that ngZone gets a chance to update the state of\n              // pending macrotasks.\n              scheduleMicroTask(() => {\n                if (!ngZone.hasPendingMacrotasks) {\n                  if (this._promise !== null) {\n                    this._resolve!(true);\n                    this._resolve = null;\n                    this._promise = null;\n                  }\n                }\n              });\n            }\n          }\n        });\n\n        this._onErrorSubscription = ngZone.onError.subscribe({\n          next: (error: any) => {\n            throw error;\n          }\n        });\n      });\n    }\n  }\n\n  private _tick(checkNoChanges: boolean) {\n    this.changeDetectorRef.detectChanges();\n    if (checkNoChanges) {\n      this.checkNoChanges();\n    }\n  }\n\n  /**\n   * Trigger a change detection cycle for the component.\n   */\n  detectChanges(checkNoChanges: boolean = true): void {\n    if (this.ngZone != null) {\n      // Run the change detection inside the NgZone so that any async tasks as part of the change\n      // detection are captured by the zone and can be waited for in isStable.\n      this.ngZone.run(() => {\n        this._tick(checkNoChanges);\n      });\n    } else {\n      // Running without zone. Just do the change detection.\n      this._tick(checkNoChanges);\n    }\n  }\n\n  /**\n   * Do a change detection run to make sure there were no changes.\n   */\n  checkNoChanges(): void {\n    this.changeDetectorRef.checkNoChanges();\n  }\n\n  /**\n   * Set whether the fixture should autodetect changes.\n   *\n   * Also runs detectChanges once so that any existing change is detected.\n   */\n  autoDetectChanges(autoDetect: boolean = true) {\n    if (this.ngZone == null) {\n      throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n    }\n    this._autoDetect = autoDetect;\n    this.detectChanges();\n  }\n\n  /**\n   * Return whether the fixture is currently stable or has async tasks that have not been completed\n   * yet.\n   */\n  isStable(): boolean {\n    return this._isStable && !this.ngZone!.hasPendingMacrotasks;\n  }\n\n  /**\n   * Get a promise that resolves when the fixture is stable.\n   *\n   * This can be used to resume testing after events have triggered asynchronous activity or\n   * asynchronous change detection.\n   */\n  whenStable(): Promise<any> {\n    if (this.isStable()) {\n      return Promise.resolve(false);\n    } else if (this._promise !== null) {\n      return this._promise;\n    } else {\n      this._promise = new Promise(res => {\n        this._resolve = res;\n      });\n      return this._promise;\n    }\n  }\n\n\n  private _getRenderer() {\n    if (this._renderer === undefined) {\n      this._renderer = this.componentRef.injector.get(RendererFactory2, null);\n    }\n    return this._renderer as RendererFactory2 | null;\n  }\n\n  /**\n   * Get a promise that resolves when the ui state is stable following animations.\n   */\n  whenRenderingDone(): Promise<any> {\n    const renderer = this._getRenderer();\n    if (renderer && renderer.whenRenderingDone) {\n      return renderer.whenRenderingDone();\n    }\n    return this.whenStable();\n  }\n\n  /**\n   * Trigger component destruction.\n   */\n  destroy(): void {\n    if (!this._isDestroyed) {\n      this.componentRef.destroy();\n      if (this._onUnstableSubscription != null) {\n        this._onUnstableSubscription.unsubscribe();\n        this._onUnstableSubscription = null;\n      }\n      if (this._onStableSubscription != null) {\n        this._onStableSubscription.unsubscribe();\n        this._onStableSubscription = null;\n      }\n      if (this._onMicrotaskEmptySubscription != null) {\n        this._onMicrotaskEmptySubscription.unsubscribe();\n        this._onMicrotaskEmptySubscription = null;\n      }\n      if (this._onErrorSubscription != null) {\n        this._onErrorSubscription.unsubscribe();\n        this._onErrorSubscription = null;\n      }\n      this._isDestroyed = true;\n    }\n  }\n}\n\nfunction scheduleMicroTask(fn: Function) {\n  Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * fakeAsync has been moved to zone.js\n * this file is for fallback in case old version of zone.js is used\n */\nconst _Zone: any = typeof Zone !== 'undefined' ? Zone : null;\nconst FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\ntype ProxyZoneSpec = {\n  setDelegate(delegateSpec: ZoneSpec): void; getDelegate(): ZoneSpec; resetDelegate(): void;\n};\nconst ProxyZoneSpec: {get(): ProxyZoneSpec; assertPresent: () => ProxyZoneSpec} =\n    _Zone && _Zone['ProxyZoneSpec'];\n\nlet _fakeAsyncTestZoneSpec: any = null;\n\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nexport function resetFakeAsyncZoneFallback() {\n  if (_fakeAsyncTestZoneSpec) {\n    _fakeAsyncTestZoneSpec.unlockDatePatch();\n  }\n  _fakeAsyncTestZoneSpec = null;\n  // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n  ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n}\n\nlet _inFakeAsyncCall = false;\n\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @publicApi\n */\nexport function fakeAsyncFallback(fn: Function): (...args: any[]) => any {\n  // Not using an arrow function to preserve context passed from call site\n  return function(this: unknown, ...args: any[]) {\n    const proxyZoneSpec = ProxyZoneSpec.assertPresent();\n    if (_inFakeAsyncCall) {\n      throw new Error('fakeAsync() calls can not be nested');\n    }\n    _inFakeAsyncCall = true;\n    try {\n      if (!_fakeAsyncTestZoneSpec) {\n        if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n          throw new Error('fakeAsync() calls can not be nested');\n        }\n\n        _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n      }\n\n      let res: any;\n      const lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n      proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n      _fakeAsyncTestZoneSpec.lockDatePatch();\n      try {\n        res = fn.apply(this, args);\n        flushMicrotasksFallback();\n      } finally {\n        proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n      }\n\n      if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n        throw new Error(\n            `${_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length} ` +\n            `periodic timer(s) still in the queue.`);\n      }\n\n      if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n        throw new Error(\n            `${_fakeAsyncTestZoneSpec.pendingTimers.length} timer(s) still in the queue.`);\n      }\n      return res;\n    } finally {\n      _inFakeAsyncCall = false;\n      resetFakeAsyncZoneFallback();\n    }\n  };\n}\n\nfunction _getFakeAsyncZoneSpec(): any {\n  if (_fakeAsyncTestZoneSpec == null) {\n    throw new Error('The code should be running in the fakeAsync zone to call this function');\n  }\n  return _fakeAsyncTestZoneSpec;\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @publicApi\n */\nexport function tickFallback(\n    millis: number = 0, tickOptions: {processNewMacroTasksSynchronously: boolean} = {\n      processNewMacroTasksSynchronously: true\n    }): void {\n  _getFakeAsyncZoneSpec().tick(millis, null, tickOptions);\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @publicApi\n */\nexport function flushFallback(maxTurns?: number): number {\n  return _getFakeAsyncZoneSpec().flush(maxTurns);\n}\n\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nexport function discardPeriodicTasksFallback(): void {\n  const zoneSpec = _getFakeAsyncZoneSpec();\n  zoneSpec.pendingPeriodicTimers.length = 0;\n}\n\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nexport function flushMicrotasksFallback(): void {\n  _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {discardPeriodicTasksFallback, fakeAsyncFallback, flushFallback, flushMicrotasksFallback, resetFakeAsyncZoneFallback, tickFallback} from './fake_async_fallback';\n\nconst _Zone: any = typeof Zone !== 'undefined' ? Zone : null;\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\n\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nexport function resetFakeAsyncZone(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.resetFakeAsyncZone();\n  } else {\n    return resetFakeAsyncZoneFallback();\n  }\n}\n\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @publicApi\n */\nexport function fakeAsync(fn: Function): (...args: any[]) => any {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.fakeAsync(fn);\n  } else {\n    return fakeAsyncFallback(fn);\n  }\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param millis, the number of millisecond to advance the virtual timer\n * @param tickOptions, the options of tick with a flag called\n * processNewMacroTasksSynchronously, whether to invoke the new macroTasks, by default is\n * false, means the new macroTasks will be invoked\n *\n * For example,\n *\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick();\n *   expect(nestedTimeoutInvoked).toBe(true);\n * }));\n *\n * in this case, we have a nested timeout (new macroTask), when we tick, both the\n * funcWithNestedTimeout and the nested timeout both will be invoked.\n *\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick(0, {processNewMacroTasksSynchronously: false});\n *   expect(nestedTimeoutInvoked).toBe(false);\n * }));\n *\n * if we pass the tickOptions with processNewMacroTasksSynchronously to be false, the nested timeout\n * will not be invoked.\n *\n *\n * @publicApi\n */\nexport function tick(\n    millis: number = 0, tickOptions: {processNewMacroTasksSynchronously: boolean} = {\n      processNewMacroTasksSynchronously: true\n    }): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.tick(millis, tickOptions);\n  } else {\n    return tickFallback(millis, tickOptions);\n  }\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @publicApi\n */\nexport function flush(maxTurns?: number): number {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flush(maxTurns);\n  } else {\n    return flushFallback(maxTurns);\n  }\n}\n\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nexport function discardPeriodicTasks(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.discardPeriodicTasks();\n  } else {\n    discardPeriodicTasksFallback();\n  }\n}\n\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nexport function flushMicrotasks(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flushMicrotasks();\n  } else {\n    return flushMicrotasksFallback();\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\nexport class AsyncTestCompleter {\n  // TODO(issue/24571): remove '!'.\n  private _resolve!: (result: any) => void;\n  // TODO(issue/24571): remove '!'.\n  private _reject!: (err: any) => void;\n  private _promise: Promise<any> = new Promise((res, rej) => {\n    this._resolve = res;\n    this._reject = rej;\n  });\n  done(value?: any) {\n    this._resolve(value);\n  }\n\n  fail(error?: any, stackTrace?: string) {\n    this._reject(error);\n  }\n\n  get promise(): Promise<any> {\n    return this._promise;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {Component} from './directives';\n\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nexport function resolveComponentResources(\n    resourceResolver: (url: string) => (Promise<string|{text(): Promise<string>}>)): Promise<void> {\n  // Store all promises which are fetching the resources.\n  const componentResolved: Promise<void>[] = [];\n\n  // Cache so that we don't fetch the same resource more than once.\n  const urlMap = new Map<string, Promise<string>>();\n  function cachedResourceResolve(url: string): Promise<string> {\n    let promise = urlMap.get(url);\n    if (!promise) {\n      const resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(unwrapResponse));\n    }\n    return promise;\n  }\n\n  componentResourceResolutionQueue.forEach((component: Component, type: Type<any>) => {\n    const promises: Promise<void>[] = [];\n    if (component.templateUrl) {\n      promises.push(cachedResourceResolve(component.templateUrl).then((template) => {\n        component.template = template;\n      }));\n    }\n    const styleUrls = component.styleUrls;\n    const styles = component.styles || (component.styles = []);\n    const styleOffset = component.styles.length;\n    styleUrls && styleUrls.forEach((styleUrl, index) => {\n      styles.push('');  // pre-allocate array.\n      promises.push(cachedResourceResolve(styleUrl).then((style) => {\n        styles[styleOffset + index] = style;\n        styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n        if (styleUrls.length == 0) {\n          component.styleUrls = undefined;\n        }\n      }));\n    });\n    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n    componentResolved.push(fullyResolved);\n  });\n  clearResolutionOfComponentResourcesQueue();\n  return Promise.all(componentResolved).then(() => undefined);\n}\n\nlet componentResourceResolutionQueue = new Map<Type<any>, Component>();\n\n// Track when existing ɵcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = new Set<Type<any>>();\n\nexport function maybeQueueResolutionOfComponentResources(type: Type<any>, metadata: Component) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.set(type, metadata);\n    componentDefPendingResolution.add(type);\n  }\n}\n\nexport function isComponentDefPendingResolution(type: Type<any>): boolean {\n  return componentDefPendingResolution.has(type);\n}\n\nexport function componentNeedsResolution(component: Component): boolean {\n  return !!(\n      (component.templateUrl && !component.hasOwnProperty('template')) ||\n      component.styleUrls && component.styleUrls.length);\n}\nexport function clearResolutionOfComponentResourcesQueue(): Map<Type<any>, Component> {\n  const old = componentResourceResolutionQueue;\n  componentResourceResolutionQueue = new Map();\n  return old;\n}\n\nexport function restoreComponentResolutionQueue(queue: Map<Type<any>, Component>): void {\n  componentDefPendingResolution.clear();\n  queue.forEach((_, type) => componentDefPendingResolution.add(type));\n  componentResourceResolutionQueue = queue;\n}\n\nexport function isComponentResourceResolutionQueueEmpty() {\n  return componentResourceResolutionQueue.size === 0;\n}\n\nfunction unwrapResponse(response: string|{text(): Promise<string>}): string|Promise<string> {\n  return typeof response == 'string' ? response : response.text();\n}\n\nfunction componentDefResolved(type: Type<any>): void {\n  componentDefPendingResolution.delete(type);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵstringify as stringify} from '@angular/core';\nimport {MetadataOverride} from './metadata_override';\n\ntype StringMap = {\n  [key: string]: any\n};\n\nlet _nextReferenceId = 0;\n\nexport class MetadataOverrider {\n  private _references = new Map<any, string>();\n  /**\n   * Creates a new instance for the given metadata class\n   * based on an old instance and overrides.\n   */\n  overrideMetadata<C extends T, T>(\n      metadataClass: {new(options: T): C;}, oldMetadata: C, override: MetadataOverride<T>): C {\n    const props: StringMap = {};\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach((prop) => props[prop] = (<any>oldMetadata)[prop]);\n    }\n\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${stringify(metadataClass)} at the same time!`);\n      }\n      setMetadata(props, override.set);\n    }\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n    return new metadataClass(<any>props);\n  }\n}\n\nfunction removeMetadata(metadata: StringMap, remove: any, references: Map<any, string>) {\n  const removeObjects = new Set<string>();\n  for (const prop in remove) {\n    const removeValue = remove[prop];\n    if (Array.isArray(removeValue)) {\n      removeValue.forEach((value: any) => {\n        removeObjects.add(_propHashKey(prop, value, references));\n      });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n\n  for (const prop in metadata) {\n    const propValue = metadata[prop];\n    if (Array.isArray(propValue)) {\n      metadata[prop] = propValue.filter(\n          (value: any) => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\n\nfunction addMetadata(metadata: StringMap, add: any) {\n  for (const prop in add) {\n    const addValue = add[prop];\n    const propValue = metadata[prop];\n    if (propValue != null && Array.isArray(propValue)) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\n\nfunction setMetadata(metadata: StringMap, set: any) {\n  for (const prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\n\nfunction _propHashKey(propName: any, propValue: any, references: Map<any, string>): string {\n  const replacer = (key: any, value: any) => {\n    if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n    return value;\n  };\n\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\n\nfunction _serializeReference(ref: any, references: Map<any, string>): string {\n  let id = references.get(ref);\n  if (!id) {\n    id = `${stringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n  return id;\n}\n\n\nfunction _valueProps(obj: any): string[] {\n  const props: string[] = [];\n  // regular public props\n  Object.keys(obj).forEach((prop) => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  });\n\n  // getters\n  let proto = obj;\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach((protoProp) => {\n      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n  return props;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, Directive, NgModule, Pipe, Type, ɵReflectionCapabilities as ReflectionCapabilities} from '@angular/core';\n\nimport {MetadataOverride} from './metadata_override';\nimport {MetadataOverrider} from './metadata_overrider';\n\nconst reflection = new ReflectionCapabilities();\n\n/**\n * Base interface to resolve `@Component`, `@Directive`, `@Pipe` and `@NgModule`.\n */\nexport interface Resolver<T> {\n  addOverride(type: Type<any>, override: MetadataOverride<T>): void;\n  setOverrides(overrides: Array<[Type<any>, MetadataOverride<T>]>): void;\n  resolve(type: Type<any>): T|null;\n}\n\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\nabstract class OverrideResolver<T> implements Resolver<T> {\n  private overrides = new Map<Type<any>, MetadataOverride<T>[]>();\n  private resolved = new Map<Type<any>, T|null>();\n\n  abstract get type(): any;\n\n  addOverride(type: Type<any>, override: MetadataOverride<T>) {\n    const overrides = this.overrides.get(type) || [];\n    overrides.push(override);\n    this.overrides.set(type, overrides);\n    this.resolved.delete(type);\n  }\n\n  setOverrides(overrides: Array<[Type<any>, MetadataOverride<T>]>) {\n    this.overrides.clear();\n    overrides.forEach(([type, override]) => {\n      this.addOverride(type, override);\n    });\n  }\n\n  getAnnotation(type: Type<any>): T|null {\n    const annotations = reflection.annotations(type);\n    // Try to find the nearest known Type annotation and make sure that this annotation is an\n    // instance of the type we are looking for, so we can use it for resolution. Note: there might\n    // be multiple known annotations found due to the fact that Components can extend Directives (so\n    // both Directive and Component annotations would be present), so we always check if the known\n    // annotation has the right type.\n    for (let i = annotations.length - 1; i >= 0; i--) {\n      const annotation = annotations[i];\n      const isKnownType = annotation instanceof Directive || annotation instanceof Component ||\n          annotation instanceof Pipe || annotation instanceof NgModule;\n      if (isKnownType) {\n        return annotation instanceof this.type ? annotation : null;\n      }\n    }\n    return null;\n  }\n\n  resolve(type: Type<any>): T|null {\n    let resolved = this.resolved.get(type) || null;\n\n    if (!resolved) {\n      resolved = this.getAnnotation(type);\n      if (resolved) {\n        const overrides = this.overrides.get(type);\n        if (overrides) {\n          const overrider = new MetadataOverrider();\n          overrides.forEach(override => {\n            resolved = overrider.overrideMetadata(this.type, resolved!, override);\n          });\n        }\n      }\n      this.resolved.set(type, resolved);\n    }\n\n    return resolved;\n  }\n}\n\n\nexport class DirectiveResolver extends OverrideResolver<Directive> {\n  get type() {\n    return Directive;\n  }\n}\n\nexport class ComponentResolver extends OverrideResolver<Component> {\n  get type() {\n    return Component;\n  }\n}\n\nexport class PipeResolver extends OverrideResolver<Pipe> {\n  get type() {\n    return Pipe;\n  }\n}\n\nexport class NgModuleResolver extends OverrideResolver<NgModule> {\n  get type() {\n    return NgModule;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ResourceLoader} from '@angular/compiler';\nimport {ApplicationInitStatus, Compiler, COMPILER_OPTIONS, Component, Directive, Injector, InjectorType, LOCALE_ID, ModuleWithComponentFactories, ModuleWithProviders, NgModule, NgModuleFactory, NgZone, Pipe, PlatformRef, Provider, Type, ɵcompileComponent as compileComponent, ɵcompileDirective as compileDirective, ɵcompileNgModuleDefs as compileNgModuleDefs, ɵcompilePipe as compilePipe, ɵDEFAULT_LOCALE_ID as DEFAULT_LOCALE_ID, ɵDirectiveDef as DirectiveDef, ɵgetInjectableDef as getInjectableDef, ɵNG_COMP_DEF as NG_COMP_DEF, ɵNG_DIR_DEF as NG_DIR_DEF, ɵNG_INJ_DEF as NG_INJ_DEF, ɵNG_MOD_DEF as NG_MOD_DEF, ɵNG_PIPE_DEF as NG_PIPE_DEF, ɵNgModuleFactory as R3NgModuleFactory, ɵNgModuleTransitiveScopes as NgModuleTransitiveScopes, ɵNgModuleType as NgModuleType, ɵpatchComponentDefWithScope as patchComponentDefWithScope, ɵRender3ComponentFactory as ComponentFactory, ɵRender3NgModuleRef as NgModuleRef, ɵsetLocaleId as setLocaleId, ɵtransitiveScopesFor as transitiveScopesFor, ɵɵInjectableDef as InjectableDef} from '@angular/core';\n\nimport {clearResolutionOfComponentResourcesQueue, isComponentDefPendingResolution, resolveComponentResources, restoreComponentResolutionQueue} from '../../src/metadata/resource_loading';\n\nimport {MetadataOverride} from './metadata_override';\nimport {ComponentResolver, DirectiveResolver, NgModuleResolver, PipeResolver, Resolver} from './resolvers';\nimport {TestModuleMetadata} from './test_bed_common';\n\nenum TestingModuleOverride {\n  DECLARATION,\n  OVERRIDE_TEMPLATE,\n}\n\nfunction isTestingModuleOverride(value: unknown): value is TestingModuleOverride {\n  return value === TestingModuleOverride.DECLARATION ||\n      value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n}\n\n// Resolvers for Angular decorators\ntype Resolvers = {\n  module: Resolver<NgModule>,\n  component: Resolver<Directive>,\n  directive: Resolver<Component>,\n  pipe: Resolver<Pipe>,\n};\n\ninterface CleanupOperation {\n  fieldName: string;\n  object: any;\n  originalValue: unknown;\n}\n\nexport class R3TestBedCompiler {\n  private originalComponentResolutionQueue: Map<Type<any>, Component>|null = null;\n\n  // Testing module configuration\n  private declarations: Type<any>[] = [];\n  private imports: Type<any>[] = [];\n  private providers: Provider[] = [];\n  private schemas: any[] = [];\n\n  // Queues of components/directives/pipes that should be recompiled.\n  private pendingComponents = new Set<Type<any>>();\n  private pendingDirectives = new Set<Type<any>>();\n  private pendingPipes = new Set<Type<any>>();\n\n  // Keep track of all components and directives, so we can patch Providers onto defs later.\n  private seenComponents = new Set<Type<any>>();\n  private seenDirectives = new Set<Type<any>>();\n\n  // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n  private overriddenModules = new Set<NgModuleType<any>>();\n\n  // Store resolved styles for Components that have template overrides present and `styleUrls`\n  // defined at the same time.\n  private existingComponentStyles = new Map<Type<any>, string[]>();\n\n  private resolvers: Resolvers = initResolvers();\n\n  private componentToModuleScope = new Map<Type<any>, Type<any>|TestingModuleOverride>();\n\n  // Map that keeps initial version of component/directive/pipe defs in case\n  // we compile a Type again, thus overriding respective static fields. This is\n  // required to make sure we restore defs to their initial states between test runs\n  // TODO: we should support the case with multiple defs on a type\n  private initialNgDefs = new Map<Type<any>, [string, PropertyDescriptor|undefined]>();\n\n  // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n  // defs in case TestBed makes changes to the originals.\n  private defCleanupOps: CleanupOperation[] = [];\n\n  private _injector: Injector|null = null;\n  private compilerProviders: Provider[]|null = null;\n\n  private providerOverrides: Provider[] = [];\n  private rootProviderOverrides: Provider[] = [];\n  // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n  // module's provider list.\n  private providerOverridesByModule = new Map<InjectorType<any>, Provider[]>();\n  private providerOverridesByToken = new Map<any, Provider>();\n  private moduleProvidersOverridden = new Set<Type<any>>();\n\n  private testModuleType: NgModuleType<any>;\n  private testModuleRef: NgModuleRef<any>|null = null;\n\n  constructor(private platform: PlatformRef, private additionalModuleTypes: Type<any>|Type<any>[]) {\n    class DynamicTestModule {}\n    this.testModuleType = DynamicTestModule as any;\n  }\n\n  setCompilerProviders(providers: Provider[]|null): void {\n    this.compilerProviders = providers;\n    this._injector = null;\n  }\n\n  configureTestingModule(moduleDef: TestModuleMetadata): void {\n    // Enqueue any compilation tasks for the directly declared component.\n    if (moduleDef.declarations !== undefined) {\n      this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n      this.declarations.push(...moduleDef.declarations);\n    }\n\n    // Enqueue any compilation tasks for imported modules.\n    if (moduleDef.imports !== undefined) {\n      this.queueTypesFromModulesArray(moduleDef.imports);\n      this.imports.push(...moduleDef.imports);\n    }\n\n    if (moduleDef.providers !== undefined) {\n      this.providers.push(...moduleDef.providers);\n    }\n\n    if (moduleDef.schemas !== undefined) {\n      this.schemas.push(...moduleDef.schemas);\n    }\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this.overriddenModules.add(ngModule as NgModuleType<any>);\n\n    // Compile the module right away.\n    this.resolvers.module.addOverride(ngModule, override);\n    const metadata = this.resolvers.module.resolve(ngModule);\n    if (metadata === null) {\n      throw invalidTypeError(ngModule.name, 'NgModule');\n    }\n\n    this.recompileNgModule(ngModule, metadata);\n\n    // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n    // new declarations or imported modules. Ingest any possible new types and add them to the\n    // current queue.\n    this.queueTypesFromModulesArray([ngModule]);\n  }\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this.resolvers.component.addOverride(component, override);\n    this.pendingComponents.add(component);\n  }\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this.resolvers.directive.addOverride(directive, override);\n    this.pendingDirectives.add(directive);\n  }\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this.resolvers.pipe.addOverride(pipe, override);\n    this.pendingPipes.add(pipe);\n  }\n\n  overrideProvider(\n      token: any,\n      provider: {useFactory?: Function, useValue?: any, deps?: any[], multi?: boolean}): void {\n    let providerDef: Provider;\n    if (provider.useFactory !== undefined) {\n      providerDef = {\n        provide: token,\n        useFactory: provider.useFactory,\n        deps: provider.deps || [],\n        multi: provider.multi\n      };\n    } else if (provider.useValue !== undefined) {\n      providerDef = {provide: token, useValue: provider.useValue, multi: provider.multi};\n    } else {\n      providerDef = {provide: token};\n    }\n\n    const injectableDef: InjectableDef<any>|null =\n        typeof token !== 'string' ? getInjectableDef(token) : null;\n    const isRoot = injectableDef !== null && injectableDef.providedIn === 'root';\n    const overridesBucket = isRoot ? this.rootProviderOverrides : this.providerOverrides;\n    overridesBucket.push(providerDef);\n\n    // Keep overrides grouped by token as well for fast lookups using token\n    this.providerOverridesByToken.set(token, providerDef);\n    if (injectableDef !== null && injectableDef.providedIn !== null &&\n        typeof injectableDef.providedIn !== 'string') {\n      const existingOverrides = this.providerOverridesByModule.get(injectableDef.providedIn);\n      if (existingOverrides !== undefined) {\n        existingOverrides.push(providerDef);\n      } else {\n        this.providerOverridesByModule.set(injectableDef.providedIn, [providerDef]);\n      }\n    }\n  }\n\n  overrideTemplateUsingTestingModule(type: Type<any>, template: string): void {\n    const def = (type as any)[NG_COMP_DEF];\n    const hasStyleUrls = (): boolean => {\n      const metadata = this.resolvers.component.resolve(type)! as Component;\n      return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n    };\n    const overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls();\n\n    // In Ivy, compiling a component does not require knowing the module providing the\n    // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n    // overrideComponent. Important: overriding template requires full Component re-compilation,\n    // which may fail in case styleUrls are also present (thus Component is considered as required\n    // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n    // preserve current styles available on Component def and restore styles back once compilation\n    // is complete.\n    const override = overrideStyleUrls ? {template, styles: [], styleUrls: []} : {template};\n    this.overrideComponent(type, {set: override});\n\n    if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n      this.existingComponentStyles.set(type, def.styles);\n    }\n\n    // Set the component's scope to be the testing module.\n    this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n  }\n\n  async compileComponents(): Promise<void> {\n    this.clearComponentResolutionQueue();\n    // Run compilers for all queued types.\n    let needsAsyncResources = this.compileTypesSync();\n\n    // compileComponents() should not be async unless it needs to be.\n    if (needsAsyncResources) {\n      let resourceLoader: ResourceLoader;\n      let resolver = (url: string): Promise<string> => {\n        if (!resourceLoader) {\n          resourceLoader = this.injector.get(ResourceLoader);\n        }\n        return Promise.resolve(resourceLoader.get(url));\n      };\n      await resolveComponentResources(resolver);\n    }\n  }\n\n  finalize(): NgModuleRef<any> {\n    // One last compile\n    this.compileTypesSync();\n\n    // Create the testing module itself.\n    this.compileTestModule();\n\n    this.applyTransitiveScopes();\n\n    this.applyProviderOverrides();\n\n    // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n    // Components have `styleUrls` fields defined and template override was requested.\n    this.patchComponentsWithExistingStyles();\n\n    // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n    // every component.\n    this.componentToModuleScope.clear();\n\n    const parentInjector = this.platform.injector;\n    this.testModuleRef = new NgModuleRef(this.testModuleType, parentInjector);\n\n    // ApplicationInitStatus.runInitializers() is marked @internal to core.\n    // Cast it to any before accessing it.\n    (this.testModuleRef.injector.get(ApplicationInitStatus) as any).runInitializers();\n\n    // Set locale ID after running app initializers, since locale information might be updated while\n    // running initializers. This is also consistent with the execution order while bootstrapping an\n    // app (see `packages/core/src/application_ref.ts` file).\n    const localeId = this.testModuleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n    setLocaleId(localeId);\n\n    return this.testModuleRef;\n  }\n\n  /**\n   * @internal\n   */\n  _compileNgModuleSync(moduleType: Type<any>): void {\n    this.queueTypesFromModulesArray([moduleType]);\n    this.compileTypesSync();\n    this.applyProviderOverrides();\n    this.applyProviderOverridesToModule(moduleType);\n    this.applyTransitiveScopes();\n  }\n\n  /**\n   * @internal\n   */\n  async _compileNgModuleAsync(moduleType: Type<any>): Promise<void> {\n    this.queueTypesFromModulesArray([moduleType]);\n    await this.compileComponents();\n    this.applyProviderOverrides();\n    this.applyProviderOverridesToModule(moduleType);\n    this.applyTransitiveScopes();\n  }\n\n  /**\n   * @internal\n   */\n  _getModuleResolver(): Resolver<NgModule> {\n    return this.resolvers.module;\n  }\n\n  /**\n   * @internal\n   */\n  _getComponentFactories(moduleType: NgModuleType): ComponentFactory<any>[] {\n    return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce((factories, declaration) => {\n      const componentDef = (declaration as any).ɵcmp;\n      componentDef && factories.push(new ComponentFactory(componentDef, this.testModuleRef!));\n      return factories;\n    }, [] as ComponentFactory<any>[]);\n  }\n\n  private compileTypesSync(): boolean {\n    // Compile all queued components, directives, pipes.\n    let needsAsyncResources = false;\n    this.pendingComponents.forEach(declaration => {\n      needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n      const metadata = this.resolvers.component.resolve(declaration);\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Component');\n      }\n      this.maybeStoreNgDef(NG_COMP_DEF, declaration);\n      compileComponent(declaration, metadata);\n    });\n    this.pendingComponents.clear();\n\n    this.pendingDirectives.forEach(declaration => {\n      const metadata = this.resolvers.directive.resolve(declaration);\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Directive');\n      }\n      this.maybeStoreNgDef(NG_DIR_DEF, declaration);\n      compileDirective(declaration, metadata);\n    });\n    this.pendingDirectives.clear();\n\n    this.pendingPipes.forEach(declaration => {\n      const metadata = this.resolvers.pipe.resolve(declaration);\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Pipe');\n      }\n      this.maybeStoreNgDef(NG_PIPE_DEF, declaration);\n      compilePipe(declaration, metadata);\n    });\n    this.pendingPipes.clear();\n\n    return needsAsyncResources;\n  }\n\n  private applyTransitiveScopes(): void {\n    if (this.overriddenModules.size > 0) {\n      // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n      // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n      // collect all affected modules and reset scopes to force their re-calculatation.\n      const testingModuleDef = (this.testModuleType as any)[NG_MOD_DEF];\n      const affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n      if (affectedModules.size > 0) {\n        affectedModules.forEach(moduleType => {\n          this.storeFieldOfDefOnType(moduleType as any, NG_MOD_DEF, 'transitiveCompileScopes');\n          (moduleType as any)[NG_MOD_DEF].transitiveCompileScopes = null;\n        });\n      }\n    }\n\n    const moduleToScope = new Map<Type<any>|TestingModuleOverride, NgModuleTransitiveScopes>();\n    const getScopeOfModule =\n        (moduleType: Type<any>|TestingModuleOverride): NgModuleTransitiveScopes => {\n          if (!moduleToScope.has(moduleType)) {\n            const isTestingModule = isTestingModuleOverride(moduleType);\n            const realType = isTestingModule ? this.testModuleType : moduleType as Type<any>;\n            moduleToScope.set(moduleType, transitiveScopesFor(realType));\n          }\n          return moduleToScope.get(moduleType)!;\n        };\n\n    this.componentToModuleScope.forEach((moduleType, componentType) => {\n      const moduleScope = getScopeOfModule(moduleType);\n      this.storeFieldOfDefOnType(componentType, NG_COMP_DEF, 'directiveDefs');\n      this.storeFieldOfDefOnType(componentType, NG_COMP_DEF, 'pipeDefs');\n      patchComponentDefWithScope((componentType as any).ɵcmp, moduleScope);\n    });\n\n    this.componentToModuleScope.clear();\n  }\n\n  private applyProviderOverrides(): void {\n    const maybeApplyOverrides = (field: string) => (type: Type<any>) => {\n      const resolver = field === NG_COMP_DEF ? this.resolvers.component : this.resolvers.directive;\n      const metadata = resolver.resolve(type)!;\n      if (this.hasProviderOverrides(metadata.providers)) {\n        this.patchDefWithProviderOverrides(type, field);\n      }\n    };\n    this.seenComponents.forEach(maybeApplyOverrides(NG_COMP_DEF));\n    this.seenDirectives.forEach(maybeApplyOverrides(NG_DIR_DEF));\n\n    this.seenComponents.clear();\n    this.seenDirectives.clear();\n  }\n\n  private applyProviderOverridesToModule(moduleType: Type<any>): void {\n    if (this.moduleProvidersOverridden.has(moduleType)) {\n      return;\n    }\n    this.moduleProvidersOverridden.add(moduleType);\n\n    const injectorDef: any = (moduleType as any)[NG_INJ_DEF];\n    if (this.providerOverridesByToken.size > 0) {\n      const providers = [\n        ...injectorDef.providers,\n        ...(this.providerOverridesByModule.get(moduleType as InjectorType<any>) || [])\n      ];\n      if (this.hasProviderOverrides(providers)) {\n        this.maybeStoreNgDef(NG_INJ_DEF, moduleType);\n\n        this.storeFieldOfDefOnType(moduleType, NG_INJ_DEF, 'providers');\n        injectorDef.providers = this.getOverriddenProviders(providers);\n      }\n\n      // Apply provider overrides to imported modules recursively\n      const moduleDef = (moduleType as any)[NG_MOD_DEF];\n      const imports = maybeUnwrapFn(moduleDef.imports);\n      for (const importedModule of imports) {\n        this.applyProviderOverridesToModule(importedModule);\n      }\n      // Also override the providers on any ModuleWithProviders imports since those don't appear in\n      // the moduleDef.\n      for (const importedModule of flatten(injectorDef.imports)) {\n        if (isModuleWithProviders(importedModule)) {\n          this.defCleanupOps.push({\n            object: importedModule,\n            fieldName: 'providers',\n            originalValue: importedModule.providers\n          });\n          importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n        }\n      }\n    }\n  }\n\n  private patchComponentsWithExistingStyles(): void {\n    this.existingComponentStyles.forEach(\n        (styles, type) => (type as any)[NG_COMP_DEF].styles = styles);\n    this.existingComponentStyles.clear();\n  }\n\n  private queueTypeArray(arr: any[], moduleType: Type<any>|TestingModuleOverride): void {\n    for (const value of arr) {\n      if (Array.isArray(value)) {\n        this.queueTypeArray(value, moduleType);\n      } else {\n        this.queueType(value, moduleType);\n      }\n    }\n  }\n\n  private recompileNgModule(ngModule: Type<any>, metadata: NgModule): void {\n    // Cache the initial ngModuleDef as it will be overwritten.\n    this.maybeStoreNgDef(NG_MOD_DEF, ngModule);\n    this.maybeStoreNgDef(NG_INJ_DEF, ngModule);\n\n    compileNgModuleDefs(ngModule as NgModuleType<any>, metadata);\n  }\n\n  private queueType(type: Type<any>, moduleType: Type<any>|TestingModuleOverride): void {\n    const component = this.resolvers.component.resolve(type);\n    if (component) {\n      // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n      // missing. That might happen in case a class without any Angular decorators extends another\n      // class where Component/Directive/Pipe decorator is defined.\n      if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(NG_COMP_DEF)) {\n        this.pendingComponents.add(type);\n      }\n      this.seenComponents.add(type);\n\n      // Keep track of the module which declares this component, so later the component's scope\n      // can be set correctly. If the component has already been recorded here, then one of several\n      // cases is true:\n      // * the module containing the component was imported multiple times (common).\n      // * the component is declared in multiple modules (which is an error).\n      // * the component was in 'declarations' of the testing module, and also in an imported module\n      //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n      // * overrideTemplateUsingTestingModule was called for the component in which case the module\n      //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n      //\n      // If the component was previously in the testing module's 'declarations' (meaning the\n      // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n      // real module, which was imported. This pattern is understood to mean that the component\n      // should use its original scope, but that the testing module should also contain the\n      // component in its scope.\n      if (!this.componentToModuleScope.has(type) ||\n          this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION) {\n        this.componentToModuleScope.set(type, moduleType);\n      }\n      return;\n    }\n\n    const directive = this.resolvers.directive.resolve(type);\n    if (directive) {\n      if (!type.hasOwnProperty(NG_DIR_DEF)) {\n        this.pendingDirectives.add(type);\n      }\n      this.seenDirectives.add(type);\n      return;\n    }\n\n    const pipe = this.resolvers.pipe.resolve(type);\n    if (pipe && !type.hasOwnProperty(NG_PIPE_DEF)) {\n      this.pendingPipes.add(type);\n      return;\n    }\n  }\n\n  private queueTypesFromModulesArray(arr: any[]): void {\n    // Because we may encounter the same NgModule while processing the imports and exports of an\n    // NgModule tree, we cache them in this set so we can skip ones that have already been seen\n    // encountered. In some test setups, this caching resulted in 10X runtime improvement.\n    const processedNgModuleDefs = new Set();\n    const queueTypesFromModulesArrayRecur = (arr: any[]): void => {\n      for (const value of arr) {\n        if (Array.isArray(value)) {\n          queueTypesFromModulesArrayRecur(value);\n        } else if (hasNgModuleDef(value)) {\n          const def = value.ɵmod;\n          if (processedNgModuleDefs.has(def)) {\n            continue;\n          }\n          processedNgModuleDefs.add(def);\n          // Look through declarations, imports, and exports, and queue\n          // everything found there.\n          this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n          queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n          queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n        }\n      }\n    };\n    queueTypesFromModulesArrayRecur(arr);\n  }\n\n  // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n  // that import (even transitively) an overridden one. For all affected modules we need to\n  // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n  // of this function is to collect all affected modules in a set for further processing. Example:\n  // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n  // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n  // invalidated with the override.\n  private collectModulesAffectedByOverrides(arr: any[]): Set<NgModuleType<any>> {\n    const seenModules = new Set<NgModuleType<any>>();\n    const affectedModules = new Set<NgModuleType<any>>();\n    const calcAffectedModulesRecur = (arr: any[], path: NgModuleType<any>[]): void => {\n      for (const value of arr) {\n        if (Array.isArray(value)) {\n          // If the value is an array, just flatten it (by invoking this function recursively),\n          // keeping \"path\" the same.\n          calcAffectedModulesRecur(value, path);\n        } else if (hasNgModuleDef(value)) {\n          if (seenModules.has(value)) {\n            // If we've seen this module before and it's included into \"affected modules\" list, mark\n            // the whole path that leads to that module as affected, but do not descend into its\n            // imports, since we already examined them before.\n            if (affectedModules.has(value)) {\n              path.forEach(item => affectedModules.add(item));\n            }\n            continue;\n          }\n          seenModules.add(value);\n          if (this.overriddenModules.has(value)) {\n            path.forEach(item => affectedModules.add(item));\n          }\n          // Examine module imports recursively to look for overridden modules.\n          const moduleDef = (value as any)[NG_MOD_DEF];\n          calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n        }\n      }\n    };\n    calcAffectedModulesRecur(arr, []);\n    return affectedModules;\n  }\n\n  private maybeStoreNgDef(prop: string, type: Type<any>) {\n    if (!this.initialNgDefs.has(type)) {\n      const currentDef = Object.getOwnPropertyDescriptor(type, prop);\n      this.initialNgDefs.set(type, [prop, currentDef]);\n    }\n  }\n\n  private storeFieldOfDefOnType(type: Type<any>, defField: string, fieldName: string): void {\n    const def: any = (type as any)[defField];\n    const originalValue: any = def[fieldName];\n    this.defCleanupOps.push({object: def, fieldName, originalValue});\n  }\n\n  /**\n   * Clears current components resolution queue, but stores the state of the queue, so we can\n   * restore it later. Clearing the queue is required before we try to compile components (via\n   * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n   */\n  private clearComponentResolutionQueue() {\n    if (this.originalComponentResolutionQueue === null) {\n      this.originalComponentResolutionQueue = new Map();\n    }\n    clearResolutionOfComponentResourcesQueue().forEach(\n        (value, key) => this.originalComponentResolutionQueue!.set(key, value));\n  }\n\n  /*\n   * Restores component resolution queue to the previously saved state. This operation is performed\n   * as a part of restoring the state after completion of the current set of tests (that might\n   * potentially mutate the state).\n   */\n  private restoreComponentResolutionQueue() {\n    if (this.originalComponentResolutionQueue !== null) {\n      restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n      this.originalComponentResolutionQueue = null;\n    }\n  }\n\n  restoreOriginalState(): void {\n    // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n    // case there were multiple overrides for the same field).\n    forEachRight(this.defCleanupOps, (op: CleanupOperation) => {\n      op.object[op.fieldName] = op.originalValue;\n    });\n    // Restore initial component/directive/pipe defs\n    this.initialNgDefs.forEach((value: [string, PropertyDescriptor|undefined], type: Type<any>) => {\n      const [prop, descriptor] = value;\n      if (!descriptor) {\n        // Delete operations are generally undesirable since they have performance implications\n        // on objects they were applied to. In this particular case, situations where this code\n        // is invoked should be quite rare to cause any noticeable impact, since it's applied\n        // only to some test cases (for example when class with no annotations extends some\n        // @Component) when we need to clear 'ɵcmp' field on a given class to restore\n        // its original state (before applying overrides and running tests).\n        delete (type as any)[prop];\n      } else {\n        Object.defineProperty(type, prop, descriptor);\n      }\n    });\n    this.initialNgDefs.clear();\n    this.moduleProvidersOverridden.clear();\n    this.restoreComponentResolutionQueue();\n    // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n    setLocaleId(DEFAULT_LOCALE_ID);\n  }\n\n  private compileTestModule(): void {\n    class RootScopeModule {}\n    compileNgModuleDefs(RootScopeModule as NgModuleType<any>, {\n      providers: [...this.rootProviderOverrides],\n    });\n\n    const ngZone = new NgZone({enableLongStackTrace: true});\n    const providers: Provider[] = [\n      {provide: NgZone, useValue: ngZone},\n      {provide: Compiler, useFactory: () => new R3TestCompiler(this)},\n      ...this.providers,\n      ...this.providerOverrides,\n    ];\n    const imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\n\n    // clang-format off\n    compileNgModuleDefs(this.testModuleType, {\n      declarations: this.declarations,\n      imports,\n      schemas: this.schemas,\n      providers,\n    }, /* allowDuplicateDeclarationsInRoot */ true);\n    // clang-format on\n\n    this.applyProviderOverridesToModule(this.testModuleType);\n  }\n\n  get injector(): Injector {\n    if (this._injector !== null) {\n      return this._injector;\n    }\n\n    const providers: Provider[] = [];\n    const compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\n    compilerOptions.forEach(opts => {\n      if (opts.providers) {\n        providers.push(opts.providers);\n      }\n    });\n    if (this.compilerProviders !== null) {\n      providers.push(...this.compilerProviders);\n    }\n\n    // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n    class CompilerModule {}\n    compileNgModuleDefs(CompilerModule as NgModuleType<any>, {providers});\n\n    const CompilerModuleFactory = new R3NgModuleFactory(CompilerModule);\n    this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n    return this._injector;\n  }\n\n  // get overrides for a specific provider (if any)\n  private getSingleProviderOverrides(provider: Provider): Provider|null {\n    const token = getProviderToken(provider);\n    return this.providerOverridesByToken.get(token) || null;\n  }\n\n  private getProviderOverrides(providers?: Provider[]): Provider[] {\n    if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return [];\n    // There are two flattening operations here. The inner flatten() operates on the metadata's\n    // providers and applies a mapping function which retrieves overrides for each incoming\n    // provider. The outer flatten() then flattens the produced overrides array. If this is not\n    // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n    // providers array and contaminate any error messages that might be generated.\n    return flatten(flatten(\n        providers, (provider: Provider) => this.getSingleProviderOverrides(provider) || []));\n  }\n\n  private getOverriddenProviders(providers?: Provider[]): Provider[] {\n    if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return [];\n\n    const flattenedProviders = flatten<Provider[]>(providers);\n    const overrides = this.getProviderOverrides(flattenedProviders);\n    const overriddenProviders = [...flattenedProviders, ...overrides];\n    const final: Provider[] = [];\n    const seenOverriddenProviders = new Set<Provider>();\n\n    // We iterate through the list of providers in reverse order to make sure provider overrides\n    // take precedence over the values defined in provider list. We also filter out all providers\n    // that have overrides, keeping overridden values only. This is needed, since presence of a\n    // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n    forEachRight(overriddenProviders, (provider: any) => {\n      const token: any = getProviderToken(provider);\n      if (this.providerOverridesByToken.has(token)) {\n        if (!seenOverriddenProviders.has(token)) {\n          seenOverriddenProviders.add(token);\n          // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n          // make sure that provided override takes highest precedence and is not combined with\n          // other instances of the same multi provider.\n          final.unshift({...provider, multi: false});\n        }\n      } else {\n        final.unshift(provider);\n      }\n    });\n    return final;\n  }\n\n  private hasProviderOverrides(providers?: Provider[]): boolean {\n    return this.getProviderOverrides(providers).length > 0;\n  }\n\n  private patchDefWithProviderOverrides(declaration: Type<any>, field: string): void {\n    const def = (declaration as any)[field];\n    if (def && def.providersResolver) {\n      this.maybeStoreNgDef(field, declaration);\n\n      const resolver = def.providersResolver;\n      const processProvidersFn = (providers: Provider[]) => this.getOverriddenProviders(providers);\n      this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n      def.providersResolver = (ngDef: DirectiveDef<any>) => resolver(ngDef, processProvidersFn);\n    }\n  }\n}\n\nfunction initResolvers(): Resolvers {\n  return {\n    module: new NgModuleResolver(),\n    component: new ComponentResolver(),\n    directive: new DirectiveResolver(),\n    pipe: new PipeResolver()\n  };\n}\n\nfunction hasNgModuleDef<T>(value: Type<T>): value is NgModuleType<T> {\n  return value.hasOwnProperty('ɵmod');\n}\n\nfunction maybeUnwrapFn<T>(maybeFn: (() => T)|T): T {\n  return maybeFn instanceof Function ? maybeFn() : maybeFn;\n}\n\nfunction flatten<T>(values: any[], mapFn?: (value: T) => any): T[] {\n  const out: T[] = [];\n  values.forEach(value => {\n    if (Array.isArray(value)) {\n      out.push(...flatten<T>(value, mapFn));\n    } else {\n      out.push(mapFn ? mapFn(value) : value);\n    }\n  });\n  return out;\n}\n\nfunction getProviderField(provider: Provider, field: string) {\n  return provider && typeof provider === 'object' && (provider as any)[field];\n}\n\nfunction getProviderToken(provider: Provider) {\n  return getProviderField(provider, 'provide') || provider;\n}\n\nfunction isModuleWithProviders(value: any): value is ModuleWithProviders<any> {\n  return value.hasOwnProperty('ngModule');\n}\n\nfunction forEachRight<T>(values: T[], fn: (value: T, idx: number) => void): void {\n  for (let idx = values.length - 1; idx >= 0; idx--) {\n    fn(values[idx], idx);\n  }\n}\n\nfunction invalidTypeError(name: string, expectedType: string): Error {\n  return new Error(`${name} class doesn't have @${expectedType} decorator or is missing metadata.`);\n}\n\nclass R3TestCompiler implements Compiler {\n  constructor(private testBed: R3TestBedCompiler) {}\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    this.testBed._compileNgModuleSync(moduleType);\n    return new R3NgModuleFactory(moduleType);\n  }\n\n  async compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    await this.testBed._compileNgModuleAsync(moduleType);\n    return new R3NgModuleFactory(moduleType);\n  }\n\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    const ngModuleFactory = this.compileModuleSync(moduleType);\n    const componentFactories = this.testBed._getComponentFactories(moduleType as NgModuleType<T>);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n\n  async compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    const ngModuleFactory = await this.compileModuleAsync(moduleType);\n    const componentFactories = this.testBed._getComponentFactories(moduleType as NgModuleType<T>);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n\n  clearCache(): void {}\n\n  clearCacheFor(type: Type<any>): void {}\n\n  getModuleId(moduleType: Type<any>): string|undefined {\n    const meta = this.testBed._getModuleResolver().resolve(moduleType);\n    return meta && meta.id || undefined;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractType, Component, Directive, InjectFlags, InjectionToken, NgModule, Pipe, PlatformRef, SchemaMetadata, Type} from '@angular/core';\n\nimport {ComponentFixture} from './component_fixture';\nimport {MetadataOverride} from './metadata_override';\nimport {TestBed} from './test_bed';\n\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\nexport class TestComponentRenderer {\n  insertRootElement(rootElementId: string) {}\n}\n\n/**\n * @publicApi\n */\nexport const ComponentFixtureAutoDetect =\n    new InjectionToken<boolean[]>('ComponentFixtureAutoDetect');\n\n/**\n * @publicApi\n */\nexport const ComponentFixtureNoNgZone = new InjectionToken<boolean[]>('ComponentFixtureNoNgZone');\n\n/**\n * @publicApi\n */\nexport type TestModuleMetadata = {\n  providers?: any[],\n  declarations?: any[],\n  imports?: any[],\n  schemas?: Array<SchemaMetadata|any[]>,\n  aotSummaries?: () => any[],\n};\n\n/**\n * Static methods implemented by the `TestBedViewEngine` and `TestBedRender3`\n *\n * @publicApi\n */\nexport interface TestBedStatic {\n  new(...args: any[]): TestBed;\n\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBed;\n\n  /**\n   * Reset the providers for the test injector.\n   */\n  resetTestEnvironment(): void;\n\n  resetTestingModule(): TestBedStatic;\n\n  /**\n   * Allows overriding default compiler providers and settings\n   * which are defined in test_injector.js\n   */\n  configureCompiler(config: {providers?: any[]; useJit?: boolean;}): TestBedStatic;\n\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic;\n\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  compileComponents(): Promise<any>;\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic;\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): TestBedStatic;\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): TestBedStatic;\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic;\n\n  overrideTemplate(component: Type<any>, template: string): TestBedStatic;\n\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic;\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): TestBedStatic;\n  overrideProvider(token: any, provider: {useValue: any;}): TestBedStatic;\n  overrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic;\n\n  inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue: null, flags?: InjectFlags): T\n      |null;\n\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): any;\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get(token: any, notFoundValue?: any): any;\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// The formatter and CI disagree on how this import statement should be formatted. Both try to keep\n// it on one line, too, which has gotten very hard to read & manage. So disable the formatter for\n// this statement only.\n\n/* clang-format off */\nimport {\n  AbstractType,\n  Component,\n  Directive,\n  InjectFlags,\n  InjectionToken,\n  Injector,\n  NgModule,\n  NgZone,\n  Pipe,\n  PlatformRef,\n  Type,\n  ɵflushModuleScopingQueueAsMuchAsPossible as flushModuleScopingQueueAsMuchAsPossible,\n  ɵRender3ComponentFactory as ComponentFactory,\n  ɵRender3NgModuleRef as NgModuleRef,\n  ɵresetCompiledComponents as resetCompiledComponents,\n  ɵstringify as stringify,\n} from '@angular/core';\n\n/* clang-format on */\n\nimport {ComponentFixture} from './component_fixture';\nimport {MetadataOverride} from './metadata_override';\nimport {R3TestBedCompiler} from './r3_test_bed_compiler';\nimport {TestBed} from './test_bed';\nimport {ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, TestBedStatic, TestComponentRenderer, TestModuleMetadata} from './test_bed_common';\n\nlet _nextRootElementId = 0;\n\n\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nexport class TestBedRender3 implements TestBed {\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @publicApi\n   */\n  static initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBed {\n    const testBed = _getTestBedRender3();\n    testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n    return testBed;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @publicApi\n   */\n  static resetTestEnvironment(): void {\n    _getTestBedRender3().resetTestEnvironment();\n  }\n\n  static configureCompiler(config: {providers?: any[]; useJit?: boolean;}): TestBedStatic {\n    _getTestBedRender3().configureCompiler(config);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  static configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic {\n    _getTestBedRender3().configureTestingModule(moduleDef);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  static compileComponents(): Promise<any> {\n    return _getTestBedRender3().compileComponents();\n  }\n\n  static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic {\n    _getTestBedRender3().overrideModule(ngModule, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overrideComponent(component: Type<any>, override: MetadataOverride<Component>):\n      TestBedStatic {\n    _getTestBedRender3().overrideComponent(component, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>):\n      TestBedStatic {\n    _getTestBedRender3().overrideDirective(directive, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic {\n    _getTestBedRender3().overridePipe(pipe, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overrideTemplate(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedRender3().overrideComponent(component, {set: {template, templateUrl: null!}});\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): TestBedStatic;\n  static overrideProvider(token: any, provider: {useValue: any;}): TestBedStatic;\n  static overrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic {\n    _getTestBedRender3().overrideProvider(token, provider);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  static inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue: null, flags?: InjectFlags): T\n      |null;\n  static inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T|null,\n      flags?: InjectFlags): T|null {\n    return _getTestBedRender3().inject(token, notFoundValue, flags);\n  }\n\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  static get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): any;\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  static get(token: any, notFoundValue?: any): any;\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  static get(\n      token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND,\n      flags: InjectFlags = InjectFlags.Default): any {\n    return _getTestBedRender3().inject(token, notFoundValue, flags);\n  }\n\n  static createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    return _getTestBedRender3().createComponent(component);\n  }\n\n  static resetTestingModule(): TestBedStatic {\n    _getTestBedRender3().resetTestingModule();\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  // Properties\n\n  platform: PlatformRef = null!;\n  ngModule: Type<any>|Type<any>[] = null!;\n\n  private _compiler: R3TestBedCompiler|null = null;\n  private _testModuleRef: NgModuleRef<any>|null = null;\n\n  private _activeFixtures: ComponentFixture<any>[] = [];\n  private _globalCompilationChecked = false;\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @publicApi\n   */\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    this.platform = platform;\n    this.ngModule = ngModule;\n    this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @publicApi\n   */\n  resetTestEnvironment(): void {\n    this.resetTestingModule();\n    this._compiler = null;\n    this.platform = null!;\n    this.ngModule = null!;\n  }\n\n  resetTestingModule(): void {\n    this.checkGlobalCompilationFinished();\n    resetCompiledComponents();\n    if (this._compiler !== null) {\n      this.compiler.restoreOriginalState();\n    }\n    this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n    this._testModuleRef = null;\n    this.destroyActiveFixtures();\n  }\n\n  configureCompiler(config: {providers?: any[]; useJit?: boolean;}): void {\n    if (config.useJit != null) {\n      throw new Error('the Render3 compiler JiT mode is not configurable !');\n    }\n\n    if (config.providers !== undefined) {\n      this.compiler.setCompilerProviders(config.providers);\n    }\n  }\n\n  configureTestingModule(moduleDef: TestModuleMetadata): void {\n    this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n    this.compiler.configureTestingModule(moduleDef);\n  }\n\n  compileComponents(): Promise<any> {\n    return this.compiler.compileComponents();\n  }\n\n  inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue: null, flags?: InjectFlags): T\n      |null;\n  inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T|null,\n      flags?: InjectFlags): T|null {\n    if (token as unknown === TestBedRender3) {\n      return this as any;\n    }\n    const UNDEFINED = {};\n    const result = this.testModuleRef.injector.get(token, UNDEFINED, flags);\n    return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) as any :\n                                  result;\n  }\n\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): any;\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get(token: any, notFoundValue?: any): any;\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND,\n      flags: InjectFlags = InjectFlags.Default): any {\n    return this.inject(token, notFoundValue, flags);\n  }\n\n  execute(tokens: any[], fn: Function, context?: any): any {\n    const params = tokens.map(t => this.inject(t));\n    return fn.apply(context, params);\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this.assertNotInstantiated('overrideModule', 'override module metadata');\n    this.compiler.overrideModule(ngModule, override);\n  }\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this.assertNotInstantiated('overrideComponent', 'override component metadata');\n    this.compiler.overrideComponent(component, override);\n  }\n\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string): void {\n    this.assertNotInstantiated(\n        'R3TestBed.overrideTemplateUsingTestingModule',\n        'Cannot override template when the test module has already been instantiated');\n    this.compiler.overrideTemplateUsingTestingModule(component, template);\n  }\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this.compiler.overrideDirective(directive, override);\n  }\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this.compiler.overridePipe(pipe, override);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}):\n      void {\n    this.compiler.overrideProvider(token, provider);\n  }\n\n  createComponent<T>(type: Type<T>): ComponentFixture<T> {\n    const testComponentRenderer = this.inject(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n\n    const componentDef = (type as any).ɵcmp;\n\n    if (!componentDef) {\n      throw new Error(\n          `It looks like '${stringify(type)}' has not been IVY compiled - it has no 'ɵcmp' field`);\n    }\n\n    // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n    const noNgZone = this.inject(ComponentFixtureNoNgZone as InjectionToken<boolean>, false);\n    // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n    const autoDetect: boolean =\n        this.inject(ComponentFixtureAutoDetect as InjectionToken<boolean>, false);\n    const ngZone: NgZone|null = noNgZone ? null : this.inject(NgZone, null);\n    const componentFactory = new ComponentFactory(componentDef);\n    const initComponent = () => {\n      const componentRef =\n          componentFactory.create(Injector.NULL, [], `#${rootElId}`, this.testModuleRef);\n      return new ComponentFixture<any>(componentRef, ngZone, autoDetect);\n    };\n    const fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n\n  /**\n   * @internal strip this from published d.ts files due to\n   * https://github.com/microsoft/TypeScript/issues/36216\n   */\n  private get compiler(): R3TestBedCompiler {\n    if (this._compiler === null) {\n      throw new Error(`Need to call TestBed.initTestEnvironment() first`);\n    }\n    return this._compiler;\n  }\n\n  /**\n   * @internal strip this from published d.ts files due to\n   * https://github.com/microsoft/TypeScript/issues/36216\n   */\n  private get testModuleRef(): NgModuleRef<any> {\n    if (this._testModuleRef === null) {\n      this._testModuleRef = this.compiler.finalize();\n    }\n    return this._testModuleRef;\n  }\n\n  private assertNotInstantiated(methodName: string, methodDescription: string) {\n    if (this._testModuleRef !== null) {\n      throw new Error(\n          `Cannot ${methodDescription} when the test module has already been instantiated. ` +\n          `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n\n  /**\n   * Check whether the module scoping queue should be flushed, and flush it if needed.\n   *\n   * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n   * in-progress module compilation. This creates a potential hazard - the very first time the\n   * TestBed is initialized (or if it's reset without being initialized), there may be pending\n   * compilations of modules declared in global scope. These compilations should be finished.\n   *\n   * To ensure that globally declared modules have their components scoped properly, this function\n   * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n   * to any other operations, the scoping queue is flushed.\n   */\n  private checkGlobalCompilationFinished(): void {\n    // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n    // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n    if (!this._globalCompilationChecked && this._testModuleRef === null) {\n      flushModuleScopingQueueAsMuchAsPossible();\n    }\n    this._globalCompilationChecked = true;\n  }\n\n  private destroyActiveFixtures(): void {\n    this._activeFixtures.forEach((fixture) => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        console.error('Error during cleanup of component', {\n          component: fixture.componentInstance,\n          stacktrace: e,\n        });\n      }\n    });\n    this._activeFixtures = [];\n  }\n}\n\nlet testBed: TestBedRender3;\n\nexport function _getTestBedRender3(): TestBedRender3 {\n  return testBed = testBed || new TestBedRender3();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerOptions, Component, ComponentFactory, Directive, Injectable, Injector, NgModule, Pipe, Type} from '@angular/core';\n\nimport {MetadataOverride} from './metadata_override';\n\nfunction unimplemented(): any {\n  throw Error('unimplemented');\n}\n\n/**\n * Special interface to the compiler only used by testing\n *\n * @publicApi\n */\n@Injectable()\nexport class TestingCompiler extends Compiler {\n  get injector(): Injector {\n    throw unimplemented();\n  }\n  overrideModule(module: Type<any>, overrides: MetadataOverride<NgModule>): void {\n    throw unimplemented();\n  }\n  overrideDirective(directive: Type<any>, overrides: MetadataOverride<Directive>): void {\n    throw unimplemented();\n  }\n  overrideComponent(component: Type<any>, overrides: MetadataOverride<Component>): void {\n    throw unimplemented();\n  }\n  overridePipe(directive: Type<any>, overrides: MetadataOverride<Pipe>): void {\n    throw unimplemented();\n  }\n  /**\n   * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n   * so that it can use the code generated by AOT.\n   */\n  loadAotSummaries(summaries: () => any[]) {\n    throw unimplemented();\n  }\n\n  /**\n   * Gets the component factory for the given component.\n   * This assumes that the component has been compiled before calling this call using\n   * `compileModuleAndAllComponents*`.\n   */\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> {\n    throw unimplemented();\n  }\n\n  /**\n   * Returns the component type that is stored in the given error.\n   * This can be used for errors created by compileModule...\n   */\n  getComponentFromError(error: Error): Type<any>|null {\n    throw unimplemented();\n  }\n}\n\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nexport abstract class TestingCompilerFactory {\n  abstract createTestingCompiler(options?: CompilerOptions[]): TestingCompiler;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractType, ApplicationInitStatus, CompilerOptions, Component, Directive, InjectFlags, InjectionToken, Injector, NgModule, NgModuleFactory, NgModuleRef, NgZone, Optional, Pipe, PlatformRef, Provider, SchemaMetadata, SkipSelf, StaticProvider, Type, ɵclearOverrides as clearOverrides, ɵDepFlags as DepFlags, ɵgetInjectableDef as getInjectableDef, ɵINJECTOR_SCOPE as INJECTOR_SCOPE, ɵivyEnabled as ivyEnabled, ɵNodeFlags as NodeFlags, ɵoverrideComponentView as overrideComponentView, ɵoverrideProvider as overrideProvider, ɵstringify as stringify, ɵɵInjectableDef} from '@angular/core';\n\nimport {AsyncTestCompleter} from './async_test_completer';\nimport {ComponentFixture} from './component_fixture';\nimport {MetadataOverride} from './metadata_override';\nimport {_getTestBedRender3, TestBedRender3} from './r3_test_bed';\nimport {ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, TestBedStatic, TestComponentRenderer, TestModuleMetadata} from './test_bed_common';\nimport {TestingCompiler, TestingCompilerFactory} from './test_compiler';\n\n\nlet _nextRootElementId = 0;\n\n/**\n * @publicApi\n */\nexport interface TestBed {\n  platform: PlatformRef;\n\n  ngModule: Type<any>|Type<any>[];\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   */\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void;\n\n  /**\n   * Reset the providers for the test injector.\n   */\n  resetTestEnvironment(): void;\n\n  resetTestingModule(): void;\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}): void;\n\n  configureTestingModule(moduleDef: TestModuleMetadata): void;\n\n  compileComponents(): Promise<any>;\n\n  inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue: null, flags?: InjectFlags): T\n      |null;\n\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): any;\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get(token: any, notFoundValue?: any): any;\n\n  execute(tokens: any[], fn: Function, context?: any): any;\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void;\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void;\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void;\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void;\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  overrideProvider(token: any, provider: {useValue: any;}): void;\n  overrideProvider(token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}):\n      void;\n\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string): void;\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T>;\n}\n\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nexport class TestBedViewEngine implements TestBed {\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   */\n  static initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef,\n      aotSummaries?: () => any[]): TestBedViewEngine {\n    const testBed = _getTestBedViewEngine();\n    testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n    return testBed;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   */\n  static resetTestEnvironment(): void {\n    _getTestBedViewEngine().resetTestEnvironment();\n  }\n\n  static resetTestingModule(): TestBedStatic {\n    _getTestBedViewEngine().resetTestingModule();\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Allows overriding default compiler providers and settings\n   * which are defined in test_injector.js\n   */\n  static configureCompiler(config: {providers?: any[]; useJit?: boolean;}): TestBedStatic {\n    _getTestBedViewEngine().configureCompiler(config);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  static configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic {\n    _getTestBedViewEngine().configureTestingModule(moduleDef);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  static compileComponents(): Promise<any> {\n    return getTestBed().compileComponents();\n  }\n\n  static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic {\n    _getTestBedViewEngine().overrideModule(ngModule, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overrideComponent(component: Type<any>, override: MetadataOverride<Component>):\n      TestBedStatic {\n    _getTestBedViewEngine().overrideComponent(component, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>):\n      TestBedStatic {\n    _getTestBedViewEngine().overrideDirective(directive, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic {\n    _getTestBedViewEngine().overridePipe(pipe, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overrideTemplate(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedViewEngine().overrideComponent(component, {set: {template, templateUrl: null!}});\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): TestBedStatic;\n  static overrideProvider(token: any, provider: {useValue: any;}): TestBedStatic;\n  static overrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic {\n    _getTestBedViewEngine().overrideProvider(token, provider as any);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  static inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue: null, flags?: InjectFlags): T\n      |null;\n  static inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T|null,\n      flags?: InjectFlags): T|null {\n    return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n  }\n\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  static get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): any;\n  /**\n   * @deprecated from v9.0.0 use TestBed.inject\n   * @suppress {duplicate}\n   */\n  static get(token: any, notFoundValue?: any): any;\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  static get(\n      token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND,\n      flags: InjectFlags = InjectFlags.Default): any {\n    return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n  }\n\n  static createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    return _getTestBedViewEngine().createComponent(component);\n  }\n\n  private _instantiated: boolean = false;\n\n  private _compiler: TestingCompiler = null!;\n  private _moduleRef: NgModuleRef<any> = null!;\n  private _moduleFactory: NgModuleFactory<any> = null!;\n\n  private _compilerOptions: CompilerOptions[] = [];\n\n  private _moduleOverrides: [Type<any>, MetadataOverride<NgModule>][] = [];\n  private _componentOverrides: [Type<any>, MetadataOverride<Component>][] = [];\n  private _directiveOverrides: [Type<any>, MetadataOverride<Directive>][] = [];\n  private _pipeOverrides: [Type<any>, MetadataOverride<Pipe>][] = [];\n\n  private _providers: Provider[] = [];\n  private _declarations: Array<Type<any>|any[]|any> = [];\n  private _imports: Array<Type<any>|any[]|any> = [];\n  private _schemas: Array<SchemaMetadata|any[]> = [];\n  private _activeFixtures: ComponentFixture<any>[] = [];\n\n  private _testEnvAotSummaries: () => any[] = () => [];\n  private _aotSummaries: Array<() => any[]> = [];\n  private _templateOverrides: Array<{component: Type<any>, templateOf: Type<any>}> = [];\n\n  private _isRoot: boolean = true;\n  private _rootProviderOverrides: Provider[] = [];\n\n  platform: PlatformRef = null!;\n\n  ngModule: Type<any>|Type<any>[] = null!;\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   */\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    this.platform = platform;\n    this.ngModule = ngModule;\n    if (aotSummaries) {\n      this._testEnvAotSummaries = aotSummaries;\n    }\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   */\n  resetTestEnvironment(): void {\n    this.resetTestingModule();\n    this.platform = null!;\n    this.ngModule = null!;\n    this._testEnvAotSummaries = () => [];\n  }\n\n  resetTestingModule(): void {\n    clearOverrides();\n    this._aotSummaries = [];\n    this._templateOverrides = [];\n    this._compiler = null!;\n    this._moduleOverrides = [];\n    this._componentOverrides = [];\n    this._directiveOverrides = [];\n    this._pipeOverrides = [];\n\n    this._isRoot = true;\n    this._rootProviderOverrides = [];\n\n    this._moduleRef = null!;\n    this._moduleFactory = null!;\n    this._compilerOptions = [];\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._schemas = [];\n    this._instantiated = false;\n    this._activeFixtures.forEach((fixture) => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        console.error('Error during cleanup of component', {\n          component: fixture.componentInstance,\n          stacktrace: e,\n        });\n      }\n    });\n    this._activeFixtures = [];\n  }\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}): void {\n    this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n    this._compilerOptions.push(config);\n  }\n\n  configureTestingModule(moduleDef: TestModuleMetadata): void {\n    this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n    if (moduleDef.providers) {\n      this._providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.declarations) {\n      this._declarations.push(...moduleDef.declarations);\n    }\n    if (moduleDef.imports) {\n      this._imports.push(...moduleDef.imports);\n    }\n    if (moduleDef.schemas) {\n      this._schemas.push(...moduleDef.schemas);\n    }\n    if (moduleDef.aotSummaries) {\n      this._aotSummaries.push(moduleDef.aotSummaries);\n    }\n  }\n\n  compileComponents(): Promise<any> {\n    if (this._moduleFactory || this._instantiated) {\n      return Promise.resolve(null);\n    }\n\n    const moduleType = this._createCompilerAndModule();\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n        .then((moduleAndComponentFactories) => {\n          this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n  }\n\n  private _initIfNeeded(): void {\n    if (this._instantiated) {\n      return;\n    }\n    if (!this._moduleFactory) {\n      try {\n        const moduleType = this._createCompilerAndModule();\n        this._moduleFactory =\n            this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n      } catch (e) {\n        const errorCompType = this._compiler.getComponentFromError(e);\n        if (errorCompType) {\n          throw new Error(\n              `This test module uses the component ${\n                  stringify(\n                      errorCompType)} which is using a \"templateUrl\" or \"styleUrls\", but they were never compiled. ` +\n              `Please call \"TestBed.compileComponents\" before your test.`);\n        } else {\n          throw e;\n        }\n      }\n    }\n    for (const {component, templateOf} of this._templateOverrides) {\n      const compFactory = this._compiler.getComponentFactory(templateOf);\n      overrideComponentView(component, compFactory);\n    }\n\n    const ngZone =\n        new NgZone({enableLongStackTrace: true, shouldCoalesceEventChangeDetection: false});\n    const providers: StaticProvider[] = [{provide: NgZone, useValue: ngZone}];\n    const ngZoneInjector = Injector.create({\n      providers: providers,\n      parent: this.platform.injector,\n      name: this._moduleFactory.moduleType.name\n    });\n    this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n    // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n    // before accessing it.\n    (this._moduleRef.injector.get(ApplicationInitStatus) as any).runInitializers();\n    this._instantiated = true;\n  }\n\n  private _createCompilerAndModule(): Type<any> {\n    const providers = this._providers.concat([{provide: TestBed, useValue: this}]);\n    const declarations =\n        [...this._declarations, ...this._templateOverrides.map(entry => entry.templateOf)];\n\n    const rootScopeImports = [];\n    const rootProviderOverrides = this._rootProviderOverrides;\n    if (this._isRoot) {\n      @NgModule({\n        providers: [\n          ...rootProviderOverrides,\n        ],\n        jit: true,\n      })\n      class RootScopeModule {\n      }\n      rootScopeImports.push(RootScopeModule);\n    }\n    providers.push({provide: INJECTOR_SCOPE, useValue: this._isRoot ? 'root' : null});\n\n    const imports = [rootScopeImports, this.ngModule, this._imports];\n    const schemas = this._schemas;\n\n    @NgModule({providers, declarations, imports, schemas, jit: true})\n    class DynamicTestModule {\n    }\n\n    const compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n    this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n    for (const summary of [this._testEnvAotSummaries, ...this._aotSummaries]) {\n      this._compiler.loadAotSummaries(summary);\n    }\n    this._moduleOverrides.forEach((entry) => this._compiler.overrideModule(entry[0], entry[1]));\n    this._componentOverrides.forEach(\n        (entry) => this._compiler.overrideComponent(entry[0], entry[1]));\n    this._directiveOverrides.forEach(\n        (entry) => this._compiler.overrideDirective(entry[0], entry[1]));\n    this._pipeOverrides.forEach((entry) => this._compiler.overridePipe(entry[0], entry[1]));\n    return DynamicTestModule;\n  }\n\n  private _assertNotInstantiated(methodName: string, methodDescription: string) {\n    if (this._instantiated) {\n      throw new Error(\n          `Cannot ${methodDescription} when the test module has already been instantiated. ` +\n          `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n\n  inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue: null, flags?: InjectFlags): T\n      |null;\n  inject<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T|null,\n      flags?: InjectFlags): T|null {\n    this._initIfNeeded();\n    if (token as unknown === TestBed) {\n      return this as any;\n    }\n    // Tests can inject things from the ng module and from the compiler,\n    // but the ng module can't inject things from the compiler and vice versa.\n    const UNDEFINED = {};\n    const result = this._moduleRef.injector.get(token, UNDEFINED, flags);\n    return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue, flags) as any :\n                                  result;\n  }\n\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): any;\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get(token: any, notFoundValue?: any): any;\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND,\n      flags: InjectFlags = InjectFlags.Default): any {\n    return this.inject(token, notFoundValue, flags);\n  }\n\n  execute(tokens: any[], fn: Function, context?: any): any {\n    this._initIfNeeded();\n    const params = tokens.map(t => this.inject(t));\n    return fn.apply(context, params);\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this._assertNotInstantiated('overrideModule', 'override module metadata');\n    this._moduleOverrides.push([ngModule, override]);\n  }\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this._assertNotInstantiated('overrideComponent', 'override component metadata');\n    this._componentOverrides.push([component, override]);\n  }\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this._directiveOverrides.push([directive, override]);\n  }\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this._pipeOverrides.push([pipe, override]);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  overrideProvider(token: any, provider: {useValue: any;}): void;\n  overrideProvider(token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}):\n      void {\n    this.overrideProviderImpl(token, provider);\n  }\n\n  private overrideProviderImpl(\n      token: any, provider: {\n        useFactory?: Function,\n        useValue?: any,\n        deps?: any[],\n      },\n      deprecated = false): void {\n    let def: ɵɵInjectableDef<any>|null = null;\n    if (typeof token !== 'string' && (def = getInjectableDef(token)) && def.providedIn === 'root') {\n      if (provider.useFactory) {\n        this._rootProviderOverrides.push(\n            {provide: token, useFactory: provider.useFactory, deps: provider.deps || []});\n      } else {\n        this._rootProviderOverrides.push({provide: token, useValue: provider.useValue});\n      }\n    }\n    let flags: NodeFlags = 0;\n    let value: any;\n    if (provider.useFactory) {\n      flags |= NodeFlags.TypeFactoryProvider;\n      value = provider.useFactory;\n    } else {\n      flags |= NodeFlags.TypeValueProvider;\n      value = provider.useValue;\n    }\n    const deps = (provider.deps || []).map((dep) => {\n      let depFlags: DepFlags = DepFlags.None;\n      let depToken: any;\n      if (Array.isArray(dep)) {\n        dep.forEach((entry: any) => {\n          if (entry instanceof Optional) {\n            depFlags |= DepFlags.Optional;\n          } else if (entry instanceof SkipSelf) {\n            depFlags |= DepFlags.SkipSelf;\n          } else {\n            depToken = entry;\n          }\n        });\n      } else {\n        depToken = dep;\n      }\n      return [depFlags, depToken];\n    });\n    overrideProvider({token, flags, deps, value, deprecatedBehavior: deprecated});\n  }\n\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string) {\n    this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n\n    @Component({selector: 'empty', template, jit: true})\n    class OverrideComponent {\n    }\n\n    this._templateOverrides.push({component, templateOf: OverrideComponent});\n  }\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    this._initIfNeeded();\n    const componentFactory = this._compiler.getComponentFactory(component);\n\n    if (!componentFactory) {\n      throw new Error(`Cannot create the component ${\n          stringify(component)} as it was not imported into the testing module!`);\n    }\n\n    // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n    const noNgZone = this.inject(ComponentFixtureNoNgZone as InjectionToken<boolean>, false);\n    // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n    const autoDetect: boolean =\n        this.inject(ComponentFixtureAutoDetect as InjectionToken<boolean>, false);\n    const ngZone: NgZone|null = noNgZone ? null : this.inject(NgZone, null);\n    const testComponentRenderer: TestComponentRenderer = this.inject(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n\n    const initComponent = () => {\n      const componentRef =\n          componentFactory.create(Injector.NULL, [], `#${rootElId}`, this._moduleRef);\n      return new ComponentFixture<T>(componentRef, ngZone, autoDetect);\n    };\n\n    const fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n}\n\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n *\n * @publicApi\n */\nexport const TestBed: TestBedStatic =\n    ivyEnabled ? TestBedRender3 as any as TestBedStatic : TestBedViewEngine as any as TestBedStatic;\n\n/**\n * Returns a singleton of the applicable `TestBed`.\n *\n * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n *\n * @publicApi\n */\nexport const getTestBed: () => TestBed = ivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\n\nlet testBed: TestBedViewEngine;\n\nfunction _getTestBedViewEngine(): TestBedViewEngine {\n  return testBed = testBed || new TestBedViewEngine();\n}\n\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @publicApi\n */\nexport function inject(tokens: any[], fn: Function): () => any {\n  const testBed = getTestBed();\n  if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n    // Not using an arrow function to preserve context passed from call site\n    return function(this: unknown) {\n      // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n      // the injected tokens.\n      return testBed.compileComponents().then(() => {\n        const completer = testBed.inject(AsyncTestCompleter);\n        testBed.execute(tokens, fn, this);\n        return completer.promise;\n      });\n    };\n  } else {\n    // Not using an arrow function to preserve context passed from call site\n    return function(this: unknown) {\n      return testBed.execute(tokens, fn, this);\n    };\n  }\n}\n\n/**\n * @publicApi\n */\nexport class InjectSetupWrapper {\n  constructor(private _moduleDef: () => TestModuleMetadata) {}\n\n  private _addModule() {\n    const moduleDef = this._moduleDef();\n    if (moduleDef) {\n      getTestBed().configureTestingModule(moduleDef);\n    }\n  }\n\n  inject(tokens: any[], fn: Function): () => any {\n    const self = this;\n    // Not using an arrow function to preserve context passed from call site\n    return function(this: unknown) {\n      self._addModule();\n      return inject(tokens, fn).call(this);\n    };\n  }\n}\n\n/**\n * @publicApi\n */\nexport function withModule(moduleDef: TestModuleMetadata): InjectSetupWrapper;\nexport function withModule(moduleDef: TestModuleMetadata, fn: Function): () => any;\nexport function withModule(moduleDef: TestModuleMetadata, fn?: Function|null): (() => any)|\n    InjectSetupWrapper {\n  if (fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function(this: unknown) {\n      const testBed = getTestBed();\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n      return fn.apply(this);\n    };\n  }\n  return new InjectSetupWrapper(() => moduleDef);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Public Test Library for unit testing Angular applications. Assumes that you are running\n * with Jasmine, Mocha, or a similar framework which exports a beforeEach function and\n * allows tests to be asynchronous by either returning a promise or using a 'done' parameter.\n */\n\nimport {resetFakeAsyncZone} from './fake_async';\nimport {TestBed} from './test_bed';\n\ndeclare var global: any;\n\nconst _global = <any>(typeof window === 'undefined' ? global : window);\n\n// Reset the test providers and the fake async zone before each test.\nif (_global.beforeEach) {\n  _global.beforeEach(() => {\n    TestBed.resetTestingModule();\n    resetFakeAsyncZone();\n  });\n}\n\n// TODO(juliemr): remove this, only used because we need to export something to have compilation\n// work.\nexport const __core_private_testing_placeholder__ = '';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type used for modifications to metadata\n *\n * @publicApi\n */\nexport type MetadataOverride<T> = {\n  add?: Partial<T>,\n  remove?: Partial<T>,\n  set?: Partial<T>\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {TestingCompiler as ɵTestingCompiler, TestingCompilerFactory as ɵTestingCompilerFactory} from './test_compiler';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the core/testing package.\n */\n\nexport * from './async';\nexport * from './component_fixture';\nexport * from './fake_async';\nexport {TestBed, getTestBed, inject, InjectSetupWrapper, withModule} from './test_bed';\nexport * from './test_bed_common';\nexport * from './before_each';\nexport * from './metadata_override';\nexport {MetadataOverrider as ɵMetadataOverrider} from './metadata_overrider';\nexport * from './private_export_testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"jasmine\" />\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {TestBedRender3 as ɵangular_packages_core_testing_testing_b,_getTestBedRender3 as ɵangular_packages_core_testing_testing_c} from './src/r3_test_bed';\nexport {TestBedViewEngine as ɵangular_packages_core_testing_testing_a} from './src/test_bed';"],"names":["getDebugNode","RendererFactory2","_Zone","stringify","ReflectionCapabilities","Directive","Component","Pipe","NgModule","getInjectableDef","NG_COMP_DEF","ResourceLoader","NgModuleRef","ApplicationInitStatus","LOCALE_ID","DEFAULT_LOCALE_ID","setLocaleId","ComponentFactory","compileComponent","NG_DIR_DEF","compileDirective","NG_PIPE_DEF","compilePipe","NG_MOD_DEF","transitiveScopesFor","patchComponentDefWithScope","NG_INJ_DEF","compileNgModuleDefs","NgZone","Compiler","COMPILER_OPTIONS","R3NgModuleFactory","ModuleWithComponentFactories","InjectionToken","Injector","InjectFlags","resetCompiledComponents","flushModuleScopingQueueAsMuchAsPossible","Injectable","_nextRootElementId","clearOverrides","overrideComponentView","INJECTOR_SCOPE","Optional","SkipSelf","overrideProvider","ivyEnabled","testBed","_global"],"mappings":"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"}