import * as ts from 'typescript';
import { Maybe } from './function';
export declare function callExpression(dec?: ts.Decorator): Maybe<ts.CallExpression | undefined>;
export declare function hasProperties(expr?: ts.ObjectLiteralExpression): boolean;
export declare function objectLiteralExpression(expr?: ts.CallExpression): Maybe<ts.ObjectLiteralExpression | undefined>;
export declare function withIdentifier(identifier: string): (expr: ts.CallExpression) => Maybe<ts.CallExpression | undefined>;
export declare function isProperty(propName: string, p: ts.ObjectLiteralElement): boolean;
export declare function getInitializer(p: ts.ObjectLiteralElement): Maybe<ts.Expression | undefined>;
export declare function getStringInitializerFromProperty(propertyName: string, ps: ts.NodeArray<ts.ObjectLiteralElement>): Maybe<ts.StringLiteral | undefined>;
export declare function decoratorArgument(dec: ts.Decorator): Maybe<ts.ObjectLiteralExpression | undefined>;
