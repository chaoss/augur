"""Add DEI Badging table

Revision ID: 20
Revises: 19
Create Date: 2023-06-15 06:02:42.082872

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '20'
down_revision = '19'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dei_badging',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('badging_id', sa.Integer(), nullable=False),
    sa.Column('level', sa.String(), nullable=False),
    sa.Column('repo_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['repo_id'], ['augur_data.repo.repo_id'], name='user_repo_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', 'repo_id'),
    schema='augur_data'
    )
    op.drop_constraint('cmt_ght_author_cntrb_id_fk', 'commits', schema='augur_data', type_='foreignkey')
    op.create_foreign_key(None, 'commits', 'contributors', ['cmt_ght_author_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')
    op.drop_constraint('pr_review_unique', 'pull_request_reviews', schema='augur_data', type_='unique')
    op.create_unique_constraint(None, 'pull_request_reviews', ['pr_review_src_id', 'tool_source'], schema='augur_data')
    op.alter_column('releases', 'release_id',
               existing_type=sa.CHAR(length=256),
               type_=sa.CHAR(length=128),
               existing_nullable=False,
               existing_server_default=sa.text('nextval(\'"augur_data".releases_release_id_seq\'::regclass)'),
               schema='augur_data')
    op.drop_constraint('collection_status_repo_id_fk', 'collection_status', schema='augur_operations', type_='foreignkey')
    op.create_foreign_key('collection_status_repo_id_fk', 'collection_status', 'repo', ['repo_id'], ['repo_id'], source_schema='augur_operations', referent_schema='augur_data')
    op.alter_column('user_groups', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='augur_operations')
    op.drop_constraint('user_groups_user_id_name_key', 'user_groups', schema='augur_operations', type_='unique')
    op.create_unique_constraint('user_group_unique', 'user_groups', ['user_id', 'name'], schema='augur_operations')
    op.drop_constraint('user_repos_repo_id_fkey', 'user_repos', schema='augur_operations', type_='foreignkey')
    op.create_foreign_key('user_repo_user_id_fkey', 'user_repos', 'repo', ['repo_id'], ['repo_id'], source_schema='augur_operations', referent_schema='augur_data')
    op.alter_column('user_session_tokens', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='augur_operations')
    op.alter_column('user_session_tokens', 'application_id',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='augur_operations')
    op.add_column('users', sa.Column('email_verified', sa.Boolean(), server_default='false', nullable=False), schema='augur_operations')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'email_verified', schema='augur_operations')
    op.alter_column('user_session_tokens', 'application_id',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='augur_operations')
    op.alter_column('user_session_tokens', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='augur_operations')
    op.drop_constraint('user_repo_user_id_fkey', 'user_repos', schema='augur_operations', type_='foreignkey')
    op.create_foreign_key('user_repos_repo_id_fkey', 'user_repos', 'repo', ['repo_id'], ['repo_id'], source_schema='augur_operations')
    op.drop_constraint('user_group_unique', 'user_groups', schema='augur_operations', type_='unique')
    op.create_unique_constraint('user_groups_user_id_name_key', 'user_groups', ['user_id', 'name'], schema='augur_operations')
    op.alter_column('user_groups', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='augur_operations')
    op.drop_constraint('collection_status_repo_id_fk', 'collection_status', schema='augur_operations', type_='foreignkey')
    op.create_foreign_key('collection_status_repo_id_fk', 'collection_status', 'repo', ['repo_id'], ['repo_id'], source_schema='augur_operations')
    op.alter_column('releases', 'release_id',
               existing_type=sa.CHAR(length=128),
               type_=sa.CHAR(length=256),
               existing_nullable=False,
               existing_server_default=sa.text('nextval(\'"augur_data".releases_release_id_seq\'::regclass)'),
               schema='augur_data')
    op.drop_constraint(None, 'pull_request_reviews', schema='augur_data', type_='unique')
    op.create_unique_constraint('pr_review_unique', 'pull_request_reviews', ['pr_review_src_id'], schema='augur_data')
    op.drop_constraint(None, 'commits', schema='augur_data', type_='foreignkey')
    op.create_foreign_key('cmt_ght_author_cntrb_id_fk', 'commits', 'contributors', ['cmt_ght_author_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='RESTRICT', initially='DEFERRED', deferrable=True)
    op.drop_table('dei_badging', schema='augur_data')
    # ### end Alembic commands ###
