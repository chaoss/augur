"""Change cntrb_id to uuid

Revision ID: 6
Revises: 4
Create Date: 2022-07-14 11:17:26.424097

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import text
from augur.tasks.util.AugurUUID import AugurUUID

# revision identifiers, used by Alembic.
revision = '5'
down_revision = '4'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # drop all the columns on re

    conn = op.get_bind()

    op.drop_column('contributor_repo', 'cntrb_id')              
    op.drop_column('contributors_aliases', 'cntrb_id')              
    op.drop_column('issue_assignees', 'cntrb_id')               
    op.drop_column('issue_events', 'cntrb_id')
    conn.execute(text("""ALTER TABLE issues DROP COLUMN reporter_id CASCADE"""))              
    op.drop_column('issues', 'cntrb_id')             
    op.drop_column('message', 'cntrb_id')              
    op.drop_column('pull_request_assignees', 'contrib_id')               
    op.drop_column('pull_request_commits', 'pr_cmt_author_cntrb_id')              
    op.drop_column('pull_request_events', 'cntrb_id')              
    op.drop_column('pull_request_meta', 'cntrb_id')              
    op.drop_column('pull_request_repo', 'pr_cntrb_id')              
    op.drop_column('pull_request_reviewers', 'cntrb_id')              
    op.drop_column('pull_request_reviews', 'cntrb_id')              
    op.drop_column('pull_requests', 'pr_augur_contributor_id')              


    conn.execute(text("""DELETE FROM contributors"""))

    op.drop_column("contributors", "cntrb_id")
    op.add_column("contributors", 
        sa.Column("cntrb_id", postgresql.UUID(as_uuid=True))
    )
    op.create_primary_key("contributors-pk", "contributors", ["cntrb_id"])



    op.add_column('contributor_repo', sa.Column('cntrb_id', postgresql.UUID(as_uuid=True), nullable=False, comment='This is not null because what is the point without the contributor in this table? '), schema='augur_data')
    op.create_foreign_key(None, 'contributor_repo', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='RESTRICT')
    
    op.add_column('contributors_aliases', sa.Column('cntrb_id', postgresql.UUID(as_uuid=True), nullable=False), schema='augur_data')
    op.create_foreign_key(None, 'contributors_aliases', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='CASCADE', initially='DEFERRED', deferrable=True)

    op.add_column('issue_assignees', sa.Column('cntrb_id', postgresql.UUID(as_uuid=True), nullable=True), schema='augur_data')
    op.create_index('issue-cntrb-assign-idx-1', 'issue_assignees', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'issue_assignees', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('issue_events', sa.Column('cntrb_id', postgresql.UUID(as_uuid=True), nullable=False), schema='augur_data')
    op.create_index('issue_events_ibfk_2', 'issue_events', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'issue_events', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='RESTRICT')

    op.add_column('issues', sa.Column('reporter_id', postgresql.UUID(as_uuid=True), nullable=True, comment='The ID of the person who opened the issue. '), schema='augur_data')
    op.add_column('issues', sa.Column('cntrb_id', postgresql.UUID(as_uuid=True), nullable=True, comment='The ID of the person who closed the issue. '), schema='augur_data')
    op.create_index('issue-cntrb-dix2', 'issues', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_index('issues_ibfk_2', 'issues', ['reporter_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'issues', 'contributors', ['reporter_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')
    op.create_foreign_key(None, 'issues', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('message', sa.Column('cntrb_id', postgresql.UUID(as_uuid=True), nullable=True, comment='Not populated for mailing lists. Populated for GitHub issues. '), schema='augur_data')
    op.create_index('msg-cntrb-id-idx', 'message', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'message', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='CASCADE')

    op.add_column('pull_request_assignees', sa.Column('contrib_id', postgresql.UUID(as_uuid=True), nullable=True), schema='augur_data')
    op.create_index('pr_meta_cntrb-idx', 'pull_request_assignees', ['contrib_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'pull_request_assignees', 'contributors', ['contrib_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('pull_request_commits', sa.Column('pr_cmt_author_cntrb_id', postgresql.UUID(as_uuid=True), nullable=True), schema='augur_data')
    op.create_foreign_key(None, 'pull_request_commits', 'contributors', ['pr_cmt_author_cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='CASCADE')

    op.add_column('pull_request_events', sa.Column('cntrb_id', postgresql.UUID(as_uuid=True), nullable=False), schema='augur_data')
    op.create_index('pr_events_ibfk_2', 'pull_request_events', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'pull_request_events', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('pull_request_meta', sa.Column('cntrb_id', postgresql.UUID(as_uuid=True), nullable=True), schema='augur_data')
    op.create_index('pr_meta-cntrbid-idx', 'pull_request_meta', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'pull_request_meta', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('pull_request_repo', sa.Column('pr_cntrb_id', postgresql.UUID(as_uuid=True), nullable=True), schema='augur_data')
    op.create_index('pr-cntrb-idx-repo', 'pull_request_repo', ['pr_cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'pull_request_repo', 'contributors', ['pr_cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('pull_request_reviewers', sa.Column('cntrb_id', postgresql.UUID(as_uuid=True), nullable=True), schema='augur_data')
    op.create_index('pr-reviewers-cntrb-idx1', 'pull_request_reviewers', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'pull_request_reviewers', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='CASCADE')

    op.add_column('pull_request_reviews', sa.Column('cntrb_id', postgresql.UUID(as_uuid=True), nullable=False), schema='augur_data')
    op.create_foreign_key(None, 'pull_request_reviews', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='RESTRICT')

    op.add_column('pull_requests', sa.Column('pr_augur_contributor_id', postgresql.UUID(as_uuid=True), nullable=True, comment='This is to link to the augur contributor record. '), schema='augur_data')
    op.create_foreign_key(None, 'pull_requests', 'contributors', ['pr_augur_contributor_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='RESTRICT')

    conn.execute(
        text(
            """
                 INSERT INTO "augur_data"."contributors"("cntrb_id", "cntrb_login", "cntrb_email", "cntrb_company", "cntrb_created_at", "cntrb_type", "cntrb_fake", "cntrb_deleted", "cntrb_long", "cntrb_lat", "cntrb_country_code", "cntrb_state", "cntrb_city", "cntrb_location", "cntrb_canonical", "gh_user_id", "gh_login", "gh_url", "gh_html_url", "gh_node_id", "gh_avatar_url", "gh_gravatar_id", "gh_followers_url", "gh_following_url", "gh_gists_url", "gh_starred_url", "gh_subscriptions_url", "gh_organizations_url", "gh_repos_url", "gh_events_url", "gh_received_events_url", "gh_type", "gh_site_admin", "tool_source", "tool_version", "data_source", "data_collection_date") VALUES (:cntrb_uuid, 'not-provided', NULL, NULL, '2019-06-13 11:33:39', NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'nobody', 'http://fake.me', 'http://fake.me', 'x', 'http://fake.me', NULL, 'http://fake.me', 'http://fake.me', 'http://fake.me', 'http://fake.me', 'http://fake.me', 'http://fake.me', 'http://fake.me', 'http://fake.me', NULL, NULL, NULL, NULL, NULL, NULL, '2019-06-13 16:35:25');
            """
        ),
        cntrb_uuid=AugurUUID(platform=0, owner=0).to_UUID()
    )

    conn.execute(
        text(
            """
                 INSERT INTO "augur_data"."contributors" ("cntrb_id", "cntrb_login", "cntrb_email", "cntrb_full_name", "cntrb_company", "cntrb_created_at", "cntrb_type", "cntrb_fake", "cntrb_deleted", "cntrb_long", "cntrb_lat", "cntrb_country_code", "cntrb_state", "cntrb_city", "cntrb_location", "cntrb_canonical", "cntrb_last_used", "gh_user_id", "gh_login", "gh_url", "gh_html_url", "gh_node_id", "gh_avatar_url", "gh_gravatar_id", "gh_followers_url", "gh_following_url", "gh_gists_url", "gh_starred_url", "gh_subscriptions_url", "gh_organizations_url", "gh_repos_url", "gh_events_url", "gh_received_events_url", "gh_type", "gh_site_admin", "gl_web_url", "gl_avatar_url", "gl_state", "gl_username", "gl_full_name", "gl_id", "tool_source", "tool_version", "data_source", "data_collection_date") VALUES (:cntrb_uuid, 'nan', 'kannayoshihiro@gmail.com', 'KANNA Yoshihiro', 'UTMC', '2009-04-17 12:43:58', NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, 'kannayoshihiro@gmail.com', '2021-01-28 21:56:10-06', 74832, 'nan', 'https://api.github.com/users/nan', 'https://github.com/nan', 'MDQ6VXNlcjc0ODMy', 'https://avatars.githubusercontent.com/u/74832?v=4', '', 'https://api.github.com/users/nan/followers', 'https://api.github.com/users/nan/following{/other_user}', 'https://api.github.com/users/nan/gists{/gist_id}', 'https://api.github.com/users/nan/starred{/owner}{/repo}', 'https://api.github.com/users/nan/subscriptions', 'https://api.github.com/users/nan/orgs', 'https://api.github.com/users/nan/repos', 'https://api.github.com/users/nan/events{/privacy}', 'https://api.github.com/users/nan/received_events', 'User', 'false', NULL, NULL, NULL, NULL, NULL, NULL, 'GitHub API Worker', '1.0.0', 'GitHub API', '2021-10-28 15:23:46');
            """
        ),
        cntrb_uuid=AugurUUID(platform=0, owner=1).to_UUID()
    )


    # ### end Alembic commands ###


def downgrade():

    conn = op.get_bind()

    op.drop_column('contributor_repo', 'cntrb_id')              
    op.drop_column('contributors_aliases', 'cntrb_id')              
    op.drop_column('issue_assignees', 'cntrb_id')               
    op.drop_column('issue_events', 'cntrb_id')              
    conn.execute(text("""ALTER TABLE issues DROP COLUMN reporter_id CASCADE"""))                 
    op.drop_column('issues', 'cntrb_id')             
    op.drop_column('message', 'cntrb_id')              
    op.drop_column('pull_request_assignees', 'contrib_id')               
    op.drop_column('pull_request_commits', 'pr_cmt_author_cntrb_id')              
    op.drop_column('pull_request_events', 'cntrb_id')              
    op.drop_column('pull_request_meta', 'cntrb_id')              
    op.drop_column('pull_request_repo', 'pr_cntrb_id')              
    op.drop_column('pull_request_reviewers', 'cntrb_id')              
    op.drop_column('pull_request_reviews', 'cntrb_id')              
    op.drop_column('pull_requests', 'pr_augur_contributor_id')              

    conn.execute(text("""DELETE FROM contributors"""))

    op.drop_column("contributors", "cntrb_id")
    op.add_column("contributors", 
        sa.Column("cntrb_id", sa.BigInteger)
    )
    op.create_primary_key("contributors-pk", "contributors", ["cntrb_id"])


    op.add_column('contributor_repo', sa.Column('cntrb_id', sa.BigInteger, nullable=False, comment='This is not null because what is the point without the contributor in this table? '), schema='augur_data')
    op.create_foreign_key(None, 'contributor_repo', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='RESTRICT')
    
    op.add_column('contributors_aliases', sa.Column('cntrb_id', sa.BigInteger, nullable=False), schema='augur_data')
    op.create_foreign_key(None, 'contributors_aliases', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='CASCADE', initially='DEFERRED', deferrable=True)

    op.add_column('issue_assignees', sa.Column('cntrb_id', sa.BigInteger, nullable=True), schema='augur_data')
    op.create_index('issue-cntrb-assign-idx-1', 'issue_assignees', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'issue_assignees', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('issue_events', sa.Column('cntrb_id', sa.BigInteger, nullable=False), schema='augur_data')
    op.create_index('issue_events_ibfk_2', 'issue_events', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'issue_events', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='RESTRICT')

    op.add_column('issues', sa.Column('reporter_id', sa.BigInteger, nullable=True, comment='The ID of the person who opened the issue. '), schema='augur_data')
    op.add_column('issues', sa.Column('cntrb_id', sa.BigInteger, nullable=True, comment='The ID of the person who closed the issue. '), schema='augur_data')
    op.create_index('issue-cntrb-dix2', 'issues', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_index('issues_ibfk_2', 'issues', ['reporter_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'issues', 'contributors', ['reporter_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')
    op.create_foreign_key(None, 'issues', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('message', sa.Column('cntrb_id', sa.BigInteger, nullable=True, comment='Not populated for mailing lists. Populated for GitHub issues. '), schema='augur_data')
    op.create_index('msg-cntrb-id-idx', 'message', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'message', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='CASCADE')

    op.add_column('pull_request_assignees', sa.Column('contrib_id', sa.BigInteger, nullable=True), schema='augur_data')
    op.create_index('pr_meta_cntrb-idx', 'pull_request_assignees', ['contrib_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'pull_request_assignees', 'contributors', ['contrib_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('pull_request_commits', sa.Column('pr_cmt_author_cntrb_id', sa.BigInteger, nullable=True), schema='augur_data')
    op.create_foreign_key(None, 'pull_request_commits', 'contributors', ['pr_cmt_author_cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='CASCADE')

    op.add_column('pull_request_events', sa.Column('cntrb_id', sa.BigInteger, nullable=False), schema='augur_data')
    op.create_index('pr_events_ibfk_2', 'pull_request_events', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'pull_request_events', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('pull_request_meta', sa.Column('cntrb_id', sa.BigInteger, nullable=True), schema='augur_data')
    op.create_index('pr_meta-cntrbid-idx', 'pull_request_meta', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'pull_request_meta', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('pull_request_repo', sa.Column('pr_cntrb_id', sa.BigInteger, nullable=True), schema='augur_data')
    op.create_index('pr-cntrb-idx-repo', 'pull_request_repo', ['pr_cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'pull_request_repo', 'contributors', ['pr_cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data')

    op.add_column('pull_request_reviewers', sa.Column('cntrb_id', sa.BigInteger, nullable=True), schema='augur_data')
    op.create_index('pr-reviewers-cntrb-idx1', 'pull_request_reviewers', ['cntrb_id'], unique=False, schema='augur_data')
    op.create_foreign_key(None, 'pull_request_reviewers', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='CASCADE')

    op.add_column('pull_request_reviews', sa.Column('cntrb_id', sa.BigInteger, nullable=False), schema='augur_data')
    op.create_foreign_key(None, 'pull_request_reviews', 'contributors', ['cntrb_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='RESTRICT')

    op.add_column('pull_requests', sa.Column('pr_augur_contributor_id', sa.BigInteger, nullable=True, comment='This is to link to the augur contributor record. '), schema='augur_data')
    op.create_foreign_key(None, 'pull_requests', 'contributors', ['pr_augur_contributor_id'], ['cntrb_id'], source_schema='augur_data', referent_schema='augur_data', onupdate='CASCADE', ondelete='RESTRICT')



    conn.execute(
        text(
            """
                 INSERT INTO "augur_data"."contributors"("cntrb_id", "cntrb_login", "cntrb_email", "cntrb_company", "cntrb_created_at", "cntrb_type", "cntrb_fake", "cntrb_deleted", "cntrb_long", "cntrb_lat", "cntrb_country_code", "cntrb_state", "cntrb_city", "cntrb_location", "cntrb_canonical", "gh_user_id", "gh_login", "gh_url", "gh_html_url", "gh_node_id", "gh_avatar_url", "gh_gravatar_id", "gh_followers_url", "gh_following_url", "gh_gists_url", "gh_starred_url", "gh_subscriptions_url", "gh_organizations_url", "gh_repos_url", "gh_events_url", "gh_received_events_url", "gh_type", "gh_site_admin", "tool_source", "tool_version", "data_source", "data_collection_date") VALUES (1, 'not-provided', NULL, NULL, '2019-06-13 11:33:39', NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'nobody', 'http://fake.me', 'http://fake.me', 'x', 'http://fake.me', NULL, 'http://fake.me', 'http://fake.me', 'http://fake.me', 'http://fake.me', 'http://fake.me', 'http://fake.me', 'http://fake.me', 'http://fake.me', NULL, NULL, NULL, NULL, NULL, NULL, '2019-06-13 16:35:25');
            """
        ),
    )

    conn.execute(
        text(
            """
                 INSERT INTO "augur_data"."contributors" ("cntrb_id", "cntrb_login", "cntrb_email", "cntrb_full_name", "cntrb_company", "cntrb_created_at", "cntrb_type", "cntrb_fake", "cntrb_deleted", "cntrb_long", "cntrb_lat", "cntrb_country_code", "cntrb_state", "cntrb_city", "cntrb_location", "cntrb_canonical", "cntrb_last_used", "gh_user_id", "gh_login", "gh_url", "gh_html_url", "gh_node_id", "gh_avatar_url", "gh_gravatar_id", "gh_followers_url", "gh_following_url", "gh_gists_url", "gh_starred_url", "gh_subscriptions_url", "gh_organizations_url", "gh_repos_url", "gh_events_url", "gh_received_events_url", "gh_type", "gh_site_admin", "gl_web_url", "gl_avatar_url", "gl_state", "gl_username", "gl_full_name", "gl_id", "tool_source", "tool_version", "data_source", "data_collection_date") VALUES (11, 'nan', 'kannayoshihiro@gmail.com', 'KANNA Yoshihiro', 'UTMC', '2009-04-17 12:43:58', NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, 'kannayoshihiro@gmail.com', '2021-01-28 21:56:10-06', 74832, 'nan', 'https://api.github.com/users/nan', 'https://github.com/nan', 'MDQ6VXNlcjc0ODMy', 'https://avatars.githubusercontent.com/u/74832?v=4', '', 'https://api.github.com/users/nan/followers', 'https://api.github.com/users/nan/following{/other_user}', 'https://api.github.com/users/nan/gists{/gist_id}', 'https://api.github.com/users/nan/starred{/owner}{/repo}', 'https://api.github.com/users/nan/subscriptions', 'https://api.github.com/users/nan/orgs', 'https://api.github.com/users/nan/repos', 'https://api.github.com/users/nan/events{/privacy}', 'https://api.github.com/users/nan/received_events', 'User', 'false', NULL, NULL, NULL, NULL, NULL, NULL, 'GitHub API Worker', '1.0.0', 'GitHub API', '2021-10-28 15:23:46');
            """
        ),
    )
