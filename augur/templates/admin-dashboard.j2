<!doctype html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="apple-touch-icon" sizes="180x180"
        href="{{ url_for('static', filename= 'favicon/apple-touch-icon.png') }}">
    <link rel="icon" type="image/png" sizes="32x32"
        href="{{ url_for('static', filename= 'favicon/favicon-32x32.png') }}">
    <link rel="icon" type="image/png" sizes="16x16"
        href="{{ url_for('static', filename= 'favicon/favicon-16x16.png') }}">
    <link rel="manifest" href="{{ url_for('static', filename= 'favicon/site.webmanifest') }}">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">

    <!-- jQuery Google CDN -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <link href="{{ url_for('static', filename= 'css/dashboard.css') }}" rel="stylesheet">

    <title>Dashboard - Augur View</title>
</head>

<body>
    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>
    {% include 'notifications.j2' %}
    <div class="container-fluid overflow-hidden">
        <div class="row vh-100 overflow-none">
            <!-- Sidebar Navigation -->
            <div class="col-12 col-md-3 col-xxl-2 d-flex sticky-top dashboard-sidebar">
                <div
                    class="d-flex flex-md-column text-truncate flex-row flex-grow-1 align-items-center align-items-md-start px-3 py-2 text-white">
                    <div class="d-flex align-items-center mb-3 mb-md-0 me-md-auto text-white text-decoration-none">
                        <span class="fs-4">Dashboard</span>
                    </div>
                    <ul class="nav nav-pills flex-md-column flex-row flex-nowrap flex-shrink-1 flex-md-grow-0 flex-grow-1 mb-md-auto mb-0 justify-content-center align-items-center align-items-md-start"
                        id="menu">
                        <li>
                            <a id="stats-link" href="#stats" class="nav-link active px-sm-0 px-2">
                                <i class="fs-5 bi-graph-up"></i><span class="ms-2 d-none d-md-inline">Status</span>
                            </a>
                        </li>
                        <li>
                            <a id="user-link" href="#user" class="nav-link px-sm-0 px-2">
                                <i class="fs-5 bi-people"></i><span class="ms-2 d-none d-md-inline">Users</span>
                            </a>
                        </li>
                        <li>
                            <a id="config-link" href="#config" class="nav-link px-sm-0 px-2">
                                <i class="fs-5 bi-sliders"></i><span
                                    class="ms-2 d-none d-md-inline">Configuration</span>
                            </a>
                        </li>
                        <li>
                            <a id="worker-oauth-link" href="#worker-oauth" class="nav-link px-sm-0 px-2">
                                <i class="fs-5 bi-key"></i><span class="ms-2 d-none d-md-inline">Worker Oauth
                                    Keys</span>
                            </a>
                        </li>
                    </ul>
                    <a href="{{ url_for('root') }}"
                        class="d-flex align-items-around mw-100 text-white text-decoration-none">
                        <img src="{{ url_for('logo') }}" alt="Augur logo" height="40" class="rounded-circle me-2">
                    </a>
                </div>
            </div>
            <!-- Main Content Area -->
            <div class="col d-flex flex-column h-100 pb-5 overflow-scroll">
                {# Start dashboard content #}
                <div class="col mb-3 content-column">
                    <!-- Stats Section -->
                    <div id="stats-div">
                        <h1 id="stats-section">Stats</h1>
                        <div class="card dashboard-content">
                            <div class="card-body">
                                <div class="row justify-content-end">
                                    <h1>TODO</h1>
                                    {# Buttons for restart/shutdown can be added here if needed #}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- User List Section -->
                    <div id="user-div" hidden>
                        <h1 id="stats-section">User List</h1>
                        {% if users %}
                        {%- set tableHeaders = [
                        {"title": "ID"},
                        {"title" : "Login Name"},
                        {"title" : "First Name"},
                        {"title" : "Last Name"},
                        {"title" : "Email"},
                        {"title" : "Admin"}
                        ] -%}
                        <div class="display-table table-responsive rounded w3-animate-opacity">
                            <table class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        {%- for header in tableHeaders -%}
                                        <th scope="col">{{ header.title }}</th>
                                        {%- endfor -%}
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for user in users %}
                                    <tr>
                                        <th scope="row">{{ user.user_id }}</th>
                                        <td>{{ user.login_name }}</td>
                                        <td>{{ user.first_name }}</td>
                                        <td>{{ user.last_name }}</td>
                                        <td>{{ user.email }}</td>
                                        <td>{% if user.admin %} <i class="bi bi-check-lg"></i> {% endif %}</td>
                                    </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </div>
                        {% else %}
                        <p>What!?</p>
                        {% endif %}
                    </div>

                    <!-- Configuration Section -->
                    <div id="config-div" hidden>
                        <h1 id="stats-section">Config</h1>
                        <p>Listed below is the full Augur configuration schema. Click on a section to expand it, and
                            double-click on a text box to autofill it with the existing value.</p>
                        <p>Changes are saved automatically, although some require a restart of Augur to take effect.</p>
                        <div class="card dashboard-content">
                            <div class="card-body contrast-card">
                                <div class="accordion">
                                    {% for section in config.items() %}
                                    <div class="accordion-item">
                                        <h2 class="accordion-header" id="{{ section[0] }}-panel-heading">
                                            <button class="accordion-button collapsed" type="button"
                                                data-bs-toggle="collapse"
                                                data-bs-target="#{{ section[0]|escape_ID }}-panel" aria-expanded="false"
                                                aria-controls="{{ section[0] }}-panel">
                                                {{ section[0] }}
                                            </button>
                                        </h2>
                                        <div id="{{ section[0] }}-panel" class="accordion-collapse collapse"
                                            aria-labelledby="{{ section[0] }}-panel-heading">
                                            <div class="accordion-body">
                                                {% for setting in section[1].items() %}
                                                <div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-12">
                                                    <div class="form-group">
                                                        <label for="config_{{ section[0] }}_{{ setting[0] }}"
                                                            class="mb-1">{{ setting[0] }}</label>
                                                        <div class="input-group">
                                                            <div class="input-group-prepend">
                                                                <span class="input-group-text" id="basic-addon1"><i
                                                                        class="bi bi-check"></i></span>
                                                            </div>
                                                            <input type="text" section="{{ section[0] }}"
                                                                setting="{{ setting[0] }}"
                                                                class="form-control input-textbox"
                                                                id="config_{{ section[0] }}_{{ setting[0] }}"
                                                                placeholder="{{ setting[1] }}">
                                                        </div>
                                                        <div class="form-text mb-1">No description available</div>
                                                    </div>
                                                </div>
                                                {% endfor %}
                                            </div>
                                        </div>
                                    </div>
                                    {% endfor %}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Worker Oauth Keys Section -->
                    <div id="worker-oauth-div" hidden>
                        <h1>Worker Oauth Keys</h1>

                        <!-- Filter input for the keys table -->
                        <div class="mb-3">
                            <input type="text" id="worker-oauth-filter" class="form-control"
                                placeholder="Filter keys...">
                        </div>

                        <!-- Valid Keys Table -->
                        <h2>Valid Keys</h2>
                        <div class="display-table table-responsive rounded w3-animate-opacity">
                            <table class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th><a href="#" class="sorting-link">Key ID</a></th>
                                        <th><a href="#" class="sorting-link">Platform</a></th>
                                        <th><a href="#" class="sorting-link">Token</a></th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="worker-oauth-valid-body">
                                    <!-- Table rows will be populated dynamically from API data -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Invalid Keys Table -->
                        <h2 class="mt-4">Invalid Keys</h2>
                        <div class="display-table table-responsive rounded w3-animate-opacity">
                            <table class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th><a href="#" class="sorting-link">Key ID</a></th>
                                        <th><a href="#" class="sorting-link">Platform</a></th>
                                        <th><a href="#" class="sorting-link">Token</a></th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="worker-oauth-invalid-body">
                                    <tr>
                                        <td>2</td>
                                        <td>GitLab</td>
                                        <td>
                                            <code id="worker-key-2" data-key="glp_ABCDEF654321">**************</code>
                                            <button class="btn btn-sm btn-outline-secondary"
                                                onclick="toggleKey('worker-key-2')">Show</button>
                                        </td>
                                        <td>
                                            <button class="btn btn-danger btn-sm" onclick="deleteKey(2)">Delete</button>
                                        </td>
                                    </tr>
                                    {# Add more rows with dummy data as needed #}
                                </tbody>
                            </table>
                        </div>

                        <!-- Form to Add New Worker Oauth Key -->
                        <h2 class="mt-4">Add New Worker Oauth Key</h2>
                        <div class="card">
                            <div class="card-body">
                                <form id="worker-oauth-add-form">
                                    <div class="row g-2 align-items-center">
                                        <div class="col-md-3">
                                            <label for="workerPlatformSelect" class="form-label">Platform</label>
                                            <select class="form-select" id="workerPlatformSelect" name="platform">
                                                <option value="github">GitHub</option>
                                                <option value="gitlab">GitLab</option>
                                            </select>
                                        </div>
                                        <div class="col-md-7">
                                            <label for="workerApiKeyInput" class="form-label">API Key</label>
                                            <input type="text" class="form-control" id="workerApiKeyInput"
                                                name="api_key" placeholder="e.g. gho_XXXXXXXXXXXX or glp_XXXXXXXXXXXX">
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label d-block">&nbsp;</label>
                                            <button type="button" class="btn btn-primary w-100"
                                                onclick="saveWorkerKey()">Add Key</button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                    {# End Worker Oauth Keys Section #}
                </div>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal (used for key deletion) -->
    <div class="modal fade" id="confirmation-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Are You Sure?</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="modal-text"></p>
                </div>
                <div class="modal-footer">
                    <button id="confirmation-button" type="button" class="btn btn-primary"
                        data-bs-dismiss="modal">Continue</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Existing JS files -->
    <script src="{{ url_for('static', filename='js/range.js') }}" charset="utf-8"></script>

    <!-- Navigation Toggle Script -->
    <script type="text/javascript">
        var elements = document.getElementsByClassName("nav-link");
        range(elements.length).forEach((i) => {
            elements[i].addEventListener("click", function () {
                setActive(elements[i]);
            })
        });

        function getDivFromNavLink(navLink) {
            var href = navLink.getAttribute("href");
            var div_id = href.replace("#", "");
            return document.getElementById(div_id + "-div");
        }

        function setActive(navLink) {
            if (!navLink) {
                return;
            }

            var elements = document.getElementsByClassName("nav-link");
            range(elements.length).forEach((i) => {
                if (elements[i].classList.contains("active")) {
                    elements[i].classList.remove("active");
                    div = getDivFromNavLink(elements[i]);
                    div.hidden = true;
                }
            });
            navLink.classList.add("active");
            div = getDivFromNavLink(navLink);
            div.hidden = false;
        }
    </script>

    <!-- Restart and Shutdown Confirmation Scripts -->
    <script type="text/javascript">
        function restart_confirm() {
            var text = document.getElementById("modal-text");
            text.innerHTML = "Restarting Augur can take several minutes, and will interrupt collection. Do you want to continue?";
            var confirmModal = new bootstrap.Modal(document.getElementById('confirmation-modal'));
            var confirmButton = document.getElementById("confirmation-button");
            confirmButton.onclick = function () {
                fetch("{{ url_for('restart_system') }}")
                    .then(response => {
                        if (response.ok) {
                            window.location.replace("{{ url_for('server_ping_frontend') }}");
                        } else {
                            flashToast("An error occurred: HTTP " + response.status);
                        }
                    });
            };
            confirmModal.show();
        }

        function shutdown_confirm() {
            var text = document.getElementById("modal-text");
            text.innerHTML = "Once shut down, Augur can only be started again from the CLI. Do you want to continue?";
            var confirmModal = new bootstrap.Modal(document.getElementById('confirmation-modal'));
            var confirmButton = document.getElementById("confirmation-button");
            confirmButton.onclick = function () {
                fetch("{{ url_for('shutdown_system') }}")
                    .then(response => {
                        if (response.ok) {
                            flashToast("Shutdown request acknowledged");
                        } else {
                            flashToast("An error occurred: HTTP " + response.status);
                        }
                    });
            };
            confirmModal.show();
        }
    </script>

    <!-- Inline configuration update and API key submission scripts -->
    <script type="text/javascript">
        function submitEntry(input, icon) {
            input.toggleAttribute("disabled");
            var section = input.getAttribute("section");
            var setting = input.getAttribute("setting");
            fetch(`{{ url_for('set_config_item') }}?setting=${setting}&section=${section}&value=${input.value}`)
                .then((response) => {
                    if (!response.ok) {
                        switch (response.status) {
                            case 500: {
                                flashToast("An internal server error occurred");
                                break;
                            }
                            case 426: {
                                flashToast("Request made with HTTP, but HTTPS is required");
                                break;
                            }
                            default: {
                                flashToast("An unknown error occurred:");
                                flashToast(response.json().status);
                            }
                        }
                        icon.classList.remove("bi-arrow-clockwise");
                        icon.classList.remove("rotating");
                        icon.classList.add("bi-x");
                    } else {
                        icon.classList.remove("bi-arrow-clockwise");
                        icon.classList.remove("rotating");
                        icon.classList.add("bi-check");
                        input.placeholder = input.value;
                        input.value = "";
                    }
                    input.toggleAttribute("disabled");
                });
        }

        for (var box of document.getElementsByClassName("input-textbox")) {
            box.addEventListener("dblclick", (event) => {
                if (event.target.value == "") {
                    event.target.value = event.target.placeholder;
                }
            });

            let entryCooldown = 2000; // 2 seconds
            let cooldownTimer;
            box.addEventListener("input", (event) => {
                clearTimeout(cooldownTimer);
                icon = event.target.parentElement.getElementsByTagName("i")[0];
                if (icon.classList.contains("bi-check")) {
                    icon.classList.remove("bi-check");
                } else if (icon.classList.contains("bi-x")) {
                    icon.classList.remove("bi-x");
                }
                if (event.target.value.length == 0) {
                    icon.classList.remove("rotating");
                    icon.classList.add("bi-check");
                    return;
                }
                icon.classList.add("bi-arrow-clockwise");
                icon.classList.add("rotating");
                cooldownTimer = setTimeout(submitEntry, entryCooldown, event.target, icon);
            });
        }
    </script>
    <!-- Worker Oauth Keys Scripts -->
    <script type="text/javascript">
        // Toggle token visibility for Worker Oauth Keys
        function toggleKey(elementId) {
            var el = document.getElementById(elementId);
            var btn = el.nextElementSibling;
            var actualKey = el.getAttribute("data-key");
            if (el.innerText.trim() === actualKey) {
                el.innerText = "**************";
                btn.innerText = "Show";
            } else {
                el.innerText = actualKey;
                btn.innerText = "Hide";
            }
        }

        // Delete a key by fetching token and platform from the table row
        function deleteKey(keyName) {
            // Look up the token element using the unique key name
            var codeElement = document.getElementById("worker-key-" + keyName);
            if (!codeElement) {
                flashToast("Key element not found.");
                return;
            }

            // Retrieve the token from a data attribute
            var token = codeElement.getAttribute("data-key");

            // Locate the parent row to fetch additional details (the platform cell)
            var row = codeElement.closest("tr");
            if (!row) {
                flashToast("Table row not found.");
                return;
            }

            // Assume that the platform is in the second cell (index 1)
            var platform = row.cells[1].textContent.trim();
            if (!platform) {
                flashToast("Platform information is missing.");
                return;
            }

            // Update the confirmation modal text accordingly
            var modalText = document.getElementById("modal-text");
            modalText.innerHTML = "Are you sure you want to delete the key for " + platform + "?";

            var confirmModal = new bootstrap.Modal(document.getElementById('confirmation-modal'));
            var confirmButton = document.getElementById("confirmation-button");

            // Bind the confirmation button to delete the key when clicked
            confirmButton.onclick = function () {
                fetch("{{ url_for('delete_oauth_key') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        platform: platform,
                        token: token
                    })
                })
                    .then(response => {
                        if (response.ok) {
                            // Remove the table row upon successful deletion
                            row.remove();
                            flashToast("Key deleted successfully.");
                        } else {
                            flashToast("Failed to delete key.");
                        }
                    })
                    .catch(error => {
                        console.error("Error deleting key:", error);
                        flashToast("Error deleting key.");
                    });
            };

            // Finally, show the confirmation modal
            confirmModal.show();
        }

        function saveWorkerKey() {
            var platform = document.getElementById("workerPlatformSelect").value;
            var keyInput = document.getElementById("workerApiKeyInput").value.trim();
            if (!keyInput) {
                alert("Please enter an API key");
                return;
            }
            // Send the new oauth key to the backend
            fetch("{{ url_for('new_oauth_keys') }}", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    platform: platform, 
                    token: keyInput 
                })
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.message || "Failed to add key");
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    alert("API key added successfully!");
                    // Optionally, refresh the worker oauth keys list here
                    document.getElementById("workerApiKeyInput").value = "";
                })
                .catch(error => {
                    alert("Error: " + error.message);
                });
    }
        // Simple filtering for valid keys table
        document.getElementById("worker-oauth-filter").addEventListener("input", function () {
            var filterText = this.value.toLowerCase();
            var rows = document.querySelectorAll("#worker-oauth-valid-body tr");
            rows.forEach(row => {
                row.style.display = row.innerText.toLowerCase().includes(filterText) ? "" : "none";
            });
        });

        // Fetch and update valid keys table from API on page load
        window.addEventListener("load", function () {
            fetch("{{ url_for('get_oauth_keys') }}")
                .then(response => response.json())
                .then(data => {
                    // Expected data format:
                    // {
                    //    "github_api_key": "ghp_jksfldjkla",
                    //    "gitlab_api_key": "glpat_fjdkla",
                    //    "customplatform_api_key": "custom_XXXXXXXXXXXX"
                    // }
                    const tbody = document.getElementById("worker-oauth-valid-body");
                    tbody.innerHTML = ""; // clear existing rows
                    let count = 1;
                    // Iterate over each unique key (keyName) and its token
                    for (const [keyName, token] of Object.entries(data)) {
                        // Determine the displayed platform based on the key name
                        let platform = "";
                        if (keyName.toLowerCase().includes("github")) {
                            platform = "GitHub";
                        } else if (keyName.toLowerCase().includes("gitlab")) {
                            platform = "GitLab";
                        } else {
                            platform = keyName.replace("_api_key", ""); // or set to "Unknown"
                        }
                        // Create a new table row
                        const tr = document.createElement("tr");

                        // Key ID cell (using count for display purposes)
                        const idCell = document.createElement("td");
                        idCell.textContent = count;
                        tr.appendChild(idCell);

                        // Platform cell
                        const platformCell = document.createElement("td");
                        platformCell.textContent = platform;
                        tr.appendChild(platformCell);

                        // Token cell with masked token and a toggle button
                        const tokenCell = document.createElement("td");
                        const code = document.createElement("code");
                        // Use the keyName to uniquely identify the DOM element
                        code.id = "worker-key-" + keyName;
                        code.setAttribute("data-key", token);
                        code.textContent = "**************";
                        tokenCell.appendChild(code);
                        const toggleButton = document.createElement("button");
                        toggleButton.className = "btn btn-sm btn-outline-secondary";
                        toggleButton.textContent = "Show";
                        toggleButton.addEventListener("click", function () {
                            toggleKey(code.id);
                        });
                        tokenCell.appendChild(toggleButton);
                        tr.appendChild(tokenCell);

                        // Action cell with delete button
                        const actionCell = document.createElement("td");
                        const deleteButton = document.createElement("button");
                        deleteButton.className = "btn btn-danger btn-sm";
                        deleteButton.textContent = "Delete";
                        // Call deleteKey with the unique key name
                        deleteButton.addEventListener("click", function () {
                            deleteKey(keyName);
                        });
                        actionCell.appendChild(deleteButton);
                        tr.appendChild(actionCell);

                        tbody.appendChild(tr);
                        count++;
                    }
                })
                .catch(error => {
                    console.error("Error fetching worker oauth keys:", error);
                });
        });
    </script>

    <!-- Set Active Section on page load if specified in URL -->
    <script type="text/javascript">
        function getActive() {
            if (window.location.toString().includes("?")) {
                var search_url = new URL(window.location);
                if (!search_url.searchParams.has("section")) {
                    return;
                }
                var navID = search_url.searchParams.get("section");
                var navlink = document.getElementById(navID + "-link");
                if (!navlink) {
                    return;
                }
                setActive(navlink);
            }
        }
        getActive();
    </script>
</body>

</html>