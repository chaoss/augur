name: Build Docker images
on:
  push:
    branches:
      - main
      - dev
  pull_request:
  release:
    types:
      - published
  workflow_dispatch:

permissions: {}

jobs:
  build-image:
    name: Build image
    permissions:
      contents: read
    strategy:
      matrix:
        image:
          - backend
          - database
          - keyman
          - rabbitmq
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: setup-buildx

      - name: Build container
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/${{ matrix.image }}/Dockerfile
          platforms: linux/amd64
          tags: ghcr.io/${{ github.repository_owner }}/augur_${{ matrix.image }}:test
          cache-from: type=gha,scope=container-${{ matrix.image }}
          cache-to: type=gha,scope=container-${{ matrix.image }},mode=min
          outputs: type=docker,dest=/tmp/${{ matrix.image }}-image.tar

      - name: Save image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image }}-image
          path: /tmp/${{ matrix.image }}-image.tar



  smoke-test:
    name: Smoke test
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download image artifact (backend)
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: /tmp

      - name: Dowload image artifact (keyman)
        uses: actions/download-artifact@v4
        with:
          name: keyman-image
          path: /tmp

      - name: Dowload image artifact (database)
        uses: actions/download-artifact@v4
        with:
          name: database-image
          path: /tmp

      - name: Dowload image artifact (rabbitmq)
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-image
          path: /tmp

      - name: Load images
        run: |
          docker load -i /tmp/backend-image.tar
          docker load -i /tmp/database-image.tar
          docker load -i /tmp/keyman-image.tar
          docker load -i /tmp/rabbitmq-image.tar

      - name: Prepare compose file
        run: |
          yq eval -i '.services.augur.image = "ghcr.io/${{ github.repository_owner }}/augur_backend:test"' docker-compose.yml
          yq eval -i '.services.augur.pull_policy = "never"' docker-compose.yml
          yq eval -i '.services.augur.restart = "no"' docker-compose.yml

          yq eval -i '.services.augur-db.image = "ghcr.io/${{ github.repository_owner }}/augur_database:test"' docker-compose.yml
          yq eval -i '.services.augur-db.pull_policy = "never"' docker-compose.yml
          yq eval -i '.services.augur-db.restart = "no"' docker-compose.yml

          yq eval -i '.services.augur-keyman.image = "ghcr.io/${{ github.repository_owner }}/augur_keyman:test"' docker-compose.yml
          yq eval -i '.services.augur-keyman.pull_policy = "never"' docker-compose.yml
          yq eval -i '.services.augur-keyman.restart = "no"' docker-compose.yml

          yq eval -i '.services.rabbitmq.image = "ghcr.io/${{ github.repository_owner }}/augur_rabbitmq:test"' docker-compose.yml
          yq eval -i '.services.rabbitmq.pull_policy = "never"' docker-compose.yml
          yq eval -i '.services.rabbitmq.restart = "no"' docker-compose.yml

      - name: Setup Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: latest

      - name: Start services & wait for output
        run: |
          docker compose -f docker-compose.yml up --no-build 2>&1 \
            | tee >(grep -q "Sending due task"; \
                    docker compose -f docker-compose.yml down)
        timeout-minutes: 3
        env:
          AUGUR_GITLAB_USERNAME: dummy
          AUGUR_GITLAB_API_KEY: dummy
          AUGUR_GITHUB_USERNAME: dummy
          AUGUR_GITHUB_API_KEY: ${{ secrets.GITHUB_TOKEN }}

      - name: Dump logs
        if: always()  # Always run this step to get logs even if the previous step fails
        run: "docker run -t --rm -v augur_logs:/logs bash -c 'find /logs -type f | xargs tail -n +0'"



  push-image:
    name: Push image
    needs: smoke-test
    # We don't push images on pull requests
    if: github.event_name != 'pull_request'
    permissions:
      contents: read #  to fetch code (actions/checkout)
      packages: write #  to push docker image
    strategy:
      matrix:
        image:
          - backend
          - database
          - rabbitmq
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: setup-buildx

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set container metadata
        uses: docker/metadata-action@v5
        id: meta
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: index,manifest
        with:
          annotations: |
            org.opencontainers.image.title=augur_${{ matrix.image}}
          labels: |
            org.opencontainers.image.title=augur_${{ matrix.image}}
          images: ghcr.io/${{ github.repository_owner }}/augur_${{ matrix.image }}
          # Pushes to the dev branch update the *:devel-latest tag
          # Releases update the *:latest tag and the *:<version> tag
          # Main does not update any tags
          tags: |
            type=raw,value=devel-latest,enable=${{ github.ref == 'refs/heads/dev' }}
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}
            type=raw,value=${{ github.event.release.tag_name }},enable=${{ github.event_name == 'release' }}

      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          annotations: ${{ steps.meta.outputs.annotations }}
          context: .
          file: ./docker/${{ matrix.image }}/Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          # Only push if we've tagged the image in the metadata step
          push: ${{ steps.meta.outputs.tags != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          # Use the same cache as the build step
          cache-from: type=gha,scope=container-${{ matrix.image }}
          cache-to: type=gha,scope=container-${{ matrix.image }},mode=min
